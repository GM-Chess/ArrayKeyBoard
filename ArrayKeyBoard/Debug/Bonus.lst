
Bonus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001be4  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         00000064  20000000  0c001be4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000014  20000064  0c001c48  00010064  2**2
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  00017fc0  2**2
                  ALLOC
  5 .stab         0000009c  00000000  00000000  00010064  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      0000014d  00000000  00000000  00010100  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000001a8  00000000  00000000  00010250  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001fa8  00000000  00000000  000103f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000651  00000000  00000000  000123a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000b40  00000000  00000000  000129f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000d84  00000000  00000000  00013534  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000f4b  00000000  00000000  000142b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000bb4  00000000  00000000  00015203  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000148  00000000  00000000  00015db7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 0000070f  00000000  00000000  00015eff  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	65 0c 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     e...............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    Entry   GPDMA1_0_IRQHandler         /* Handler name for SR GPDMA1_0  */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    .thumb
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c001be4 	.word	0x0c001be4
 800024c:	20000000 	.word	0x20000000
 8000250:	00000064 	.word	0x00000064
 8000254:	0c001c48 	.word	0x0c001c48
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c001be4 	.word	0x0c001be4
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c001be4 	.word	0x0c001be4
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000064 	.word	0x20000064
 800027c:	00000014 	.word	0x00000014
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    Entry   GPDMA1_0_IRQHandler         /* Handler name for SR GPDMA1_0  */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000290:	10000800 	.word	0x10000800
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000294:	080002dd 	.word	0x080002dd
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08000cfd 	.word	0x08000cfd
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08000bb9 	.word	0x08000bb9

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	e003      	b.n	80002ca <delay+0x16>
  {
    __NOP();
 80002c2:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	3301      	adds	r3, #1
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fa      	ldr	r2, [r7, #12]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d3f7      	bcc.n	80002c2 <delay+0xe>
  {
    __NOP();
  }
}
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002dc:	b598      	push	{r3, r4, r7, lr}
 80002de:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002e0:	4a05      	ldr	r2, [pc, #20]	; (80002f8 <SystemInit+0x1c>)
 80002e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002e6:	4614      	mov	r4, r2
 80002e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002ee:	f000 f805 	bl	80002fc <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002f2:	f000 f83b 	bl	800036c <SystemCoreClockSetup>
}
 80002f6:	bd98      	pop	{r3, r4, r7, pc}
 80002f8:	2000ffc4 	.word	0x2000ffc4

080002fc <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000302:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8000304:	4b16      	ldr	r3, [pc, #88]	; (8000360 <SystemCoreSetup+0x64>)
 8000306:	4a17      	ldr	r2, [pc, #92]	; (8000364 <SystemCoreSetup+0x68>)
 8000308:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800030a:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800030e:	b662      	cpsie	i
  /* __FPU_USED value depends on compiler/linker options. */
  /* __FPU_USED = 0 if -mfloat-abi=soft is selected */
  /* __FPU_USED = 1 if -mfloat-abi=softfp or –mfloat-abi=hard */

#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8000310:	4a13      	ldr	r2, [pc, #76]	; (8000360 <SystemCoreSetup+0x64>)
 8000312:	4b13      	ldr	r3, [pc, #76]	; (8000360 <SystemCoreSetup+0x64>)
 8000314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800031c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#else
  SCB->CPACR = 0;
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000320:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <SystemCoreSetup+0x64>)
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <SystemCoreSetup+0x64>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f023 0308 	bic.w	r3, r3, #8
 800032a:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 800032c:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <SystemCoreSetup+0x6c>)
 800032e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000332:	3314      	adds	r3, #20
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f023 030f 	bic.w	r3, r3, #15
 800033e:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	f043 0303 	orr.w	r3, r3, #3
 8000346:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000348:	4b07      	ldr	r3, [pc, #28]	; (8000368 <SystemCoreSetup+0x6c>)
 800034a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800034e:	3314      	adds	r3, #20
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	601a      	str	r2, [r3, #0]
}
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	e000ed00 	.word	0xe000ed00
 8000364:	08000000 	.word	0x08000000
 8000368:	58001000 	.word	0x58001000

0800036c <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000370:	4b77      	ldr	r3, [pc, #476]	; (8000550 <SystemCoreClockSetup+0x1e4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f003 0301 	and.w	r3, r3, #1
 8000378:	2b00      	cmp	r3, #0
 800037a:	d10c      	bne.n	8000396 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 800037c:	4a74      	ldr	r2, [pc, #464]	; (8000550 <SystemCoreClockSetup+0x1e4>)
 800037e:	4b74      	ldr	r3, [pc, #464]	; (8000550 <SystemCoreClockSetup+0x1e4>)
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000388:	bf00      	nop
 800038a:	4b71      	ldr	r3, [pc, #452]	; (8000550 <SystemCoreClockSetup+0x1e4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	2b00      	cmp	r3, #0
 8000394:	d0f9      	beq.n	800038a <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <SystemCoreClockSetup+0x1e8>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d009      	beq.n	80003b6 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80003a2:	4a6c      	ldr	r2, [pc, #432]	; (8000554 <SystemCoreClockSetup+0x1e8>)
 80003a4:	4b6b      	ldr	r3, [pc, #428]	; (8000554 <SystemCoreClockSetup+0x1e8>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ac:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80003ae:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80003b2:	f7ff ff7f 	bl	80002b4 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80003b6:	4a68      	ldr	r2, [pc, #416]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 80003b8:	4b67      	ldr	r3, [pc, #412]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003c0:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80003c2:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80003c6:	f7ff ff75 	bl	80002b4 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80003ca:	4a63      	ldr	r2, [pc, #396]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 80003cc:	4b62      	ldr	r3, [pc, #392]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003d4:	f023 0302 	bic.w	r3, r3, #2
 80003d8:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80003da:	4b60      	ldr	r3, [pc, #384]	; (800055c <SystemCoreClockSetup+0x1f0>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d026      	beq.n	8000434 <SystemCoreClockSetup+0xc8>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80003e6:	4a5d      	ldr	r2, [pc, #372]	; (800055c <SystemCoreClockSetup+0x1f0>)
 80003e8:	4b5c      	ldr	r3, [pc, #368]	; (800055c <SystemCoreClockSetup+0x1f0>)
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80003f0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80003f4:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80003f6:	f000 f92b 	bl	8000650 <OSCHP_GetFrequency>
 80003fa:	4602      	mov	r2, r0
 80003fc:	4b58      	ldr	r3, [pc, #352]	; (8000560 <SystemCoreClockSetup+0x1f4>)
 80003fe:	fba3 2302 	umull	r2, r3, r3, r2
 8000402:	0d1b      	lsrs	r3, r3, #20
 8000404:	3b01      	subs	r3, #1
 8000406:	041b      	lsls	r3, r3, #16
 8000408:	4954      	ldr	r1, [pc, #336]	; (800055c <SystemCoreClockSetup+0x1f0>)
 800040a:	4a54      	ldr	r2, [pc, #336]	; (800055c <SystemCoreClockSetup+0x1f0>)
 800040c:	6852      	ldr	r2, [r2, #4]
 800040e:	4313      	orrs	r3, r2
 8000410:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 = 0;
 8000412:	4b51      	ldr	r3, [pc, #324]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 8000414:	2200      	movs	r2, #0
 8000416:	60da      	str	r2, [r3, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000418:	4a4f      	ldr	r2, [pc, #316]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 800041a:	4b4f      	ldr	r3, [pc, #316]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000422:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000424:	bf00      	nop
 8000426:	4b4c      	ldr	r3, [pc, #304]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800042e:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000432:	d1f8      	bne.n	8000426 <SystemCoreClockSetup+0xba>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 = SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000434:	4a48      	ldr	r2, [pc, #288]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 8000436:	4b48      	ldr	r3, [pc, #288]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	f043 0301 	orr.w	r3, r3, #1
 800043e:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000440:	bf00      	nop
 8000442:	4b45      	ldr	r3, [pc, #276]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	2b00      	cmp	r3, #0
 800044c:	d0f9      	beq.n	8000442 <SystemCoreClockSetup+0xd6>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 800044e:	4a42      	ldr	r2, [pc, #264]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 8000450:	4b41      	ldr	r3, [pc, #260]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	f043 0310 	orr.w	r3, r3, #16
 8000458:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800045a:	4b3f      	ldr	r3, [pc, #252]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 800045c:	4a41      	ldr	r2, [pc, #260]	; (8000564 <SystemCoreClockSetup+0x1f8>)
 800045e:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000460:	4a3d      	ldr	r2, [pc, #244]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 8000462:	4b3d      	ldr	r3, [pc, #244]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800046a:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 800046c:	4a3a      	ldr	r2, [pc, #232]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 800046e:	4b3a      	ldr	r3, [pc, #232]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	f023 0310 	bic.w	r3, r3, #16
 8000476:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000478:	4a37      	ldr	r2, [pc, #220]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 800047a:	4b37      	ldr	r3, [pc, #220]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000482:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000484:	bf00      	nop
 8000486:	4b34      	ldr	r3, [pc, #208]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f003 0304 	and.w	r3, r3, #4
 800048e:	2b00      	cmp	r3, #0
 8000490:	d0f9      	beq.n	8000486 <SystemCoreClockSetup+0x11a>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000492:	4a31      	ldr	r2, [pc, #196]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 8000494:	4b30      	ldr	r3, [pc, #192]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	f023 0301 	bic.w	r3, r3, #1
 800049c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800049e:	bf00      	nop
 80004a0:	4b2d      	ldr	r3, [pc, #180]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f003 0301 	and.w	r3, r3, #1
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d1f9      	bne.n	80004a0 <SystemCoreClockSetup+0x134>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80004ac:	4a2e      	ldr	r2, [pc, #184]	; (8000568 <SystemCoreClockSetup+0x1fc>)
 80004ae:	4b2e      	ldr	r3, [pc, #184]	; (8000568 <SystemCoreClockSetup+0x1fc>)
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004b6:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80004b8:	4b2b      	ldr	r3, [pc, #172]	; (8000568 <SystemCoreClockSetup+0x1fc>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80004be:	4b2a      	ldr	r3, [pc, #168]	; (8000568 <SystemCoreClockSetup+0x1fc>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80004c4:	4b28      	ldr	r3, [pc, #160]	; (8000568 <SystemCoreClockSetup+0x1fc>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80004ca:	4b27      	ldr	r3, [pc, #156]	; (8000568 <SystemCoreClockSetup+0x1fc>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 80004d0:	4b25      	ldr	r3, [pc, #148]	; (8000568 <SystemCoreClockSetup+0x1fc>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 80004d6:	4b24      	ldr	r3, [pc, #144]	; (8000568 <SystemCoreClockSetup+0x1fc>)
 80004d8:	2203      	movs	r2, #3
 80004da:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80004dc:	4a1e      	ldr	r2, [pc, #120]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 80004de:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004e6:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 80004ea:	4a20      	ldr	r2, [pc, #128]	; (800056c <SystemCoreClockSetup+0x200>)
 80004ec:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 80004ee:	bf00      	nop
 80004f0:	4b19      	ldr	r3, [pc, #100]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f003 0320 	and.w	r3, r3, #32
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0f9      	beq.n	80004f0 <SystemCoreClockSetup+0x184>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_60MHZ);
 80004fc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000500:	f7ff fed8 	bl	80002b4 <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 8000506:	4a1a      	ldr	r2, [pc, #104]	; (8000570 <SystemCoreClockSetup+0x204>)
 8000508:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 800050a:	bf00      	nop
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f003 0320 	and.w	r3, r3, #32
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0f9      	beq.n	800050c <SystemCoreClockSetup+0x1a0>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_90MHZ);
 8000518:	f241 1094 	movw	r0, #4500	; 0x1194
 800051c:	f7ff feca 	bl	80002b4 <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 8000522:	4a14      	ldr	r2, [pc, #80]	; (8000574 <SystemCoreClockSetup+0x208>)
 8000524:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000526:	bf00      	nop
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f003 0320 	and.w	r3, r3, #32
 8000530:	2b00      	cmp	r3, #0
 8000532:	d0f9      	beq.n	8000528 <SystemCoreClockSetup+0x1bc>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_120MHZ);
 8000534:	f241 7070 	movw	r0, #6000	; 0x1770
 8000538:	f7ff febc 	bl	80002b4 <delay>

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <SystemCoreClockSetup+0x20c>)
 800053e:	2205      	movs	r2, #5
 8000540:	60da      	str	r2, [r3, #12]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <SystemCoreClockSetup+0x1fc>)
 8000544:	2200      	movs	r2, #0
 8000546:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8000548:	f000 f818 	bl	800057c <SystemCoreClockUpdate>
}
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	50004200 	.word	0x50004200
 8000554:	50004400 	.word	0x50004400
 8000558:	50004710 	.word	0x50004710
 800055c:	50004700 	.word	0x50004700
 8000560:	6b5fca6b 	.word	0x6b5fca6b
 8000564:	01134f00 	.word	0x01134f00
 8000568:	50004600 	.word	0x50004600
 800056c:	01074f00 	.word	0x01074f00
 8000570:	01044f00 	.word	0x01044f00
 8000574:	01034f00 	.word	0x01034f00
 8000578:	50004160 	.word	0x50004160

0800057c <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8000582:	4b2f      	ldr	r3, [pc, #188]	; (8000640 <SystemCoreClockUpdate+0xc4>)
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800058a:	2b00      	cmp	r3, #0
 800058c:	d03e      	beq.n	800060c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800058e:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <SystemCoreClockUpdate+0xc8>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d002      	beq.n	80005a0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 800059a:	4b2b      	ldr	r3, [pc, #172]	; (8000648 <SystemCoreClockUpdate+0xcc>)
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	e002      	b.n	80005a6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80005a0:	f000 f856 	bl	8000650 <OSCHP_GetFrequency>
 80005a4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80005a6:	4b27      	ldr	r3, [pc, #156]	; (8000644 <SystemCoreClockUpdate+0xc8>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d020      	beq.n	80005f4 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80005b2:	4b24      	ldr	r3, [pc, #144]	; (8000644 <SystemCoreClockUpdate+0xc8>)
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80005ba:	0e1b      	lsrs	r3, r3, #24
 80005bc:	3301      	adds	r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80005c0:	4b20      	ldr	r3, [pc, #128]	; (8000644 <SystemCoreClockUpdate+0xc8>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80005c8:	0a1b      	lsrs	r3, r3, #8
 80005ca:	3301      	adds	r3, #1
 80005cc:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80005ce:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <SystemCoreClockUpdate+0xc8>)
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80005d6:	0c1b      	lsrs	r3, r3, #16
 80005d8:	3301      	adds	r3, #1
 80005da:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	683a      	ldr	r2, [r7, #0]
 80005e0:	fb02 f303 	mul.w	r3, r2, r3
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	fb02 f303 	mul.w	r3, r2, r3
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	e00d      	b.n	8000610 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80005f4:	4b13      	ldr	r3, [pc, #76]	; (8000644 <SystemCoreClockUpdate+0xc8>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005fc:	3301      	adds	r3, #1
 80005fe:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000600:	68fa      	ldr	r2, [r7, #12]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	fbb2 f3f3 	udiv	r3, r2, r3
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	e001      	b.n	8000610 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <SystemCoreClockUpdate+0xcc>)
 800060e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <SystemCoreClockUpdate+0xc4>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	3301      	adds	r3, #1
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	fbb2 f3f3 	udiv	r3, r2, r3
 800061e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <SystemCoreClockUpdate+0xc4>)
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	3301      	adds	r3, #1
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000630:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000632:	4a06      	ldr	r2, [pc, #24]	; (800064c <SystemCoreClockUpdate+0xd0>)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	50004600 	.word	0x50004600
 8000644:	50004710 	.word	0x50004710
 8000648:	016e3600 	.word	0x016e3600
 800064c:	2000ffc0 	.word	0x2000ffc0

08000650 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8000654:	4b02      	ldr	r3, [pc, #8]	; (8000660 <OSCHP_GetFrequency+0x10>)
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	00b71b00 	.word	0x00b71b00

08000664 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <_sbrk+0x5c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d102      	bne.n	800067a <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <_sbrk+0x5c>)
 8000676:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <_sbrk+0x60>)
 8000678:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <_sbrk+0x5c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3303      	adds	r3, #3
 8000684:	f023 0303 	bic.w	r3, r3, #3
 8000688:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <_sbrk+0x5c>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <_sbrk+0x64>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d207      	bcs.n	80006a8 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <_sbrk+0x5c>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	4a07      	ldr	r2, [pc, #28]	; (80006c0 <_sbrk+0x5c>)
 80006a2:	6013      	str	r3, [r2, #0]
    return (base);
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	e006      	b.n	80006b6 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 80006a8:	f000 fb22 	bl	8000cf0 <__errno>
 80006ac:	4602      	mov	r2, r0
 80006ae:	230c      	movs	r3, #12
 80006b0:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000064 	.word	0x20000064
 80006c4:	20000078 	.word	0x20000078
 80006c8:	2000ffc0 	.word	0x2000ffc0

080006cc <_init>:

/* Init */
void _init(void)
{}
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS; 
 80006de:	2300      	movs	r3, #0
 80006e0:	71fb      	strb	r3, [r7, #7]
  return init_status;
 80006e2:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80006e4:	4618      	mov	r0, r3
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	db0a      	blt.n	800071a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	490d      	ldr	r1, [pc, #52]	; (800073c <__NVIC_SetPriority+0x4c>)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	b2d2      	uxtb	r2, r2
 800070e:	0092      	lsls	r2, r2, #2
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	440b      	add	r3, r1
 8000714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000718:	e00a      	b.n	8000730 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071a:	4909      	ldr	r1, [pc, #36]	; (8000740 <__NVIC_SetPriority+0x50>)
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	f003 030f 	and.w	r3, r3, #15
 8000722:	3b04      	subs	r3, #4
 8000724:	683a      	ldr	r2, [r7, #0]
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	0092      	lsls	r2, r2, #2
 800072a:	b2d2      	uxtb	r2, r2
 800072c:	440b      	add	r3, r1
 800072e:	761a      	strb	r2, [r3, #24]
  }
}
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000e100 	.word	0xe000e100
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000754:	d301      	bcc.n	800075a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000756:	2301      	movs	r3, #1
 8000758:	e00f      	b.n	800077a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <SysTick_Config+0x40>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000762:	f04f 30ff 	mov.w	r0, #4294967295
 8000766:	213f      	movs	r1, #63	; 0x3f
 8000768:	f7ff ffc2 	bl	80006f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <SysTick_Config+0x40>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SysTick_Config+0x40>)
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e000e010 	.word	0xe000e010

08000788 <P0_0_set_mode>:

#define SOFTWARE        0x0UL
#define HW0             0x1UL
#define HW1             0x2UL

__STATIC_INLINE void P0_0_set_mode(uint8_t mode){
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
    PORT0->IOCR0 &= ~0x000000f8UL;
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <P0_0_set_mode+0x2c>)
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <P0_0_set_mode+0x2c>)
 8000796:	691b      	ldr	r3, [r3, #16]
 8000798:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800079c:	6113      	str	r3, [r2, #16]
    PORT0->IOCR0 |= mode << 0;
 800079e:	4905      	ldr	r1, [pc, #20]	; (80007b4 <P0_0_set_mode+0x2c>)
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <P0_0_set_mode+0x2c>)
 80007a2:	691a      	ldr	r2, [r3, #16]
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	610b      	str	r3, [r1, #16]
}
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	48028000 	.word	0x48028000

080007b8 <P0_0_set_driver_strength>:

__STATIC_INLINE void P0_0_set_driver_strength(uint8_t strength){
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
    PORT0->PDR0 &= ~0x00000007UL;
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <P0_0_set_driver_strength+0x2c>)
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <P0_0_set_driver_strength+0x2c>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	f023 0307 	bic.w	r3, r3, #7
 80007cc:	6413      	str	r3, [r2, #64]	; 0x40
    PORT0->PDR0 |= strength << 0;
 80007ce:	4905      	ldr	r1, [pc, #20]	; (80007e4 <P0_0_set_driver_strength+0x2c>)
 80007d0:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <P0_0_set_driver_strength+0x2c>)
 80007d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	48028000 	.word	0x48028000

080007e8 <P0_1_set_mode>:

__STATIC_INLINE uint32_t P0_0_read(void){
    return(PORT0->IN & 0x00000001UL);
}

__STATIC_INLINE void P0_1_set_mode(uint8_t mode){
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
    PORT0->IOCR0 &= ~0x0000f800UL;
 80007f2:	4a09      	ldr	r2, [pc, #36]	; (8000818 <P0_1_set_mode+0x30>)
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <P0_1_set_mode+0x30>)
 80007f6:	691b      	ldr	r3, [r3, #16]
 80007f8:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 80007fc:	6113      	str	r3, [r2, #16]
    PORT0->IOCR0 |= mode << 8;
 80007fe:	4906      	ldr	r1, [pc, #24]	; (8000818 <P0_1_set_mode+0x30>)
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <P0_1_set_mode+0x30>)
 8000802:	691b      	ldr	r3, [r3, #16]
 8000804:	79fa      	ldrb	r2, [r7, #7]
 8000806:	0212      	lsls	r2, r2, #8
 8000808:	4313      	orrs	r3, r2
 800080a:	610b      	str	r3, [r1, #16]
}
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	48028000 	.word	0x48028000

0800081c <P0_1_set_driver_strength>:

__STATIC_INLINE void P0_1_set_driver_strength(uint8_t strength){
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
    PORT0->PDR0 &= ~0x00000070UL;
 8000826:	4a09      	ldr	r2, [pc, #36]	; (800084c <P0_1_set_driver_strength+0x30>)
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <P0_1_set_driver_strength+0x30>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
    PORT0->PDR0 |= strength << 4;
 8000832:	4906      	ldr	r1, [pc, #24]	; (800084c <P0_1_set_driver_strength+0x30>)
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <P0_1_set_driver_strength+0x30>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	79fa      	ldrb	r2, [r7, #7]
 800083a:	0112      	lsls	r2, r2, #4
 800083c:	4313      	orrs	r3, r2
 800083e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	48028000 	.word	0x48028000

08000850 <P0_1_read>:

__STATIC_INLINE void P0_1_toggle(void){
    PORT0->OMR = 0x00020002UL;
}

__STATIC_INLINE uint32_t P0_1_read(void){
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
    return(PORT0->IN & 0x00000002UL);
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <P0_1_read+0x18>)
 8000856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000858:	f003 0302 	and.w	r3, r3, #2
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	48028000 	.word	0x48028000

0800086c <P0_9_set_mode>:

__STATIC_INLINE uint32_t P0_8_read(void){
    return(PORT0->IN & 0x00000100UL);
}

__STATIC_INLINE void P0_9_set_mode(uint8_t mode){
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
    PORT0->IOCR8 &= ~0x0000f800UL;
 8000876:	4a09      	ldr	r2, [pc, #36]	; (800089c <P0_9_set_mode+0x30>)
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <P0_9_set_mode+0x30>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8000880:	6193      	str	r3, [r2, #24]
    PORT0->IOCR8 |= mode << 8;
 8000882:	4906      	ldr	r1, [pc, #24]	; (800089c <P0_9_set_mode+0x30>)
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <P0_9_set_mode+0x30>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	79fa      	ldrb	r2, [r7, #7]
 800088a:	0212      	lsls	r2, r2, #8
 800088c:	4313      	orrs	r3, r2
 800088e:	618b      	str	r3, [r1, #24]
}
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	48028000 	.word	0x48028000

080008a0 <P0_9_set_driver_strength>:

__STATIC_INLINE void P0_9_set_driver_strength(uint8_t strength){
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
    PORT0->PDR1 &= ~0x00000070UL;
 80008aa:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <P0_9_set_driver_strength+0x30>)
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <P0_9_set_driver_strength+0x30>)
 80008ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008b4:	6453      	str	r3, [r2, #68]	; 0x44
    PORT0->PDR1 |= strength << 4;
 80008b6:	4906      	ldr	r1, [pc, #24]	; (80008d0 <P0_9_set_driver_strength+0x30>)
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <P0_9_set_driver_strength+0x30>)
 80008ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008bc:	79fa      	ldrb	r2, [r7, #7]
 80008be:	0112      	lsls	r2, r2, #4
 80008c0:	4313      	orrs	r3, r2
 80008c2:	644b      	str	r3, [r1, #68]	; 0x44
}
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	48028000 	.word	0x48028000

080008d4 <P0_10_set_mode>:

__STATIC_INLINE uint32_t P0_9_read(void){
    return(PORT0->IN & 0x00000200UL);
}

__STATIC_INLINE void P0_10_set_mode(uint8_t mode){
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
    PORT0->IOCR8 &= ~0x00f80000UL;
 80008de:	4a09      	ldr	r2, [pc, #36]	; (8000904 <P0_10_set_mode+0x30>)
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <P0_10_set_mode+0x30>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 80008e8:	6193      	str	r3, [r2, #24]
    PORT0->IOCR8 |= mode << 16;
 80008ea:	4906      	ldr	r1, [pc, #24]	; (8000904 <P0_10_set_mode+0x30>)
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <P0_10_set_mode+0x30>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	79fa      	ldrb	r2, [r7, #7]
 80008f2:	0412      	lsls	r2, r2, #16
 80008f4:	4313      	orrs	r3, r2
 80008f6:	618b      	str	r3, [r1, #24]
}
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	48028000 	.word	0x48028000

08000908 <P0_10_set_driver_strength>:

__STATIC_INLINE void P0_10_set_driver_strength(uint8_t strength){
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
    PORT0->PDR1 &= ~0x00000700UL;
 8000912:	4a09      	ldr	r2, [pc, #36]	; (8000938 <P0_10_set_driver_strength+0x30>)
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <P0_10_set_driver_strength+0x30>)
 8000916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000918:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
    PORT0->PDR1 |= strength << 8;
 800091e:	4906      	ldr	r1, [pc, #24]	; (8000938 <P0_10_set_driver_strength+0x30>)
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <P0_10_set_driver_strength+0x30>)
 8000922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000924:	79fa      	ldrb	r2, [r7, #7]
 8000926:	0212      	lsls	r2, r2, #8
 8000928:	4313      	orrs	r3, r2
 800092a:	644b      	str	r3, [r1, #68]	; 0x44
}
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	48028000 	.word	0x48028000

0800093c <P1_0_set_mode>:

__STATIC_INLINE uint32_t P0_12_read(void){
    return(PORT0->IN & 0x00001000UL);
}

__STATIC_INLINE void P1_0_set_mode(uint8_t mode){
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
    PORT1->IOCR0 &= ~0x000000f8UL;
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <P1_0_set_mode+0x2c>)
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <P1_0_set_mode+0x2c>)
 800094a:	691b      	ldr	r3, [r3, #16]
 800094c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000950:	6113      	str	r3, [r2, #16]
    PORT1->IOCR0 |= mode << 0;
 8000952:	4905      	ldr	r1, [pc, #20]	; (8000968 <P1_0_set_mode+0x2c>)
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <P1_0_set_mode+0x2c>)
 8000956:	691a      	ldr	r2, [r3, #16]
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	4313      	orrs	r3, r2
 800095c:	610b      	str	r3, [r1, #16]
}
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	48028100 	.word	0x48028100

0800096c <P1_0_set_driver_strength>:

__STATIC_INLINE void P1_0_set_driver_strength(uint8_t strength){
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
    PORT1->PDR0 &= ~0x00000007UL;
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <P1_0_set_driver_strength+0x2c>)
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <P1_0_set_driver_strength+0x2c>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	f023 0307 	bic.w	r3, r3, #7
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
    PORT1->PDR0 |= strength << 0;
 8000982:	4905      	ldr	r1, [pc, #20]	; (8000998 <P1_0_set_driver_strength+0x2c>)
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <P1_0_set_driver_strength+0x2c>)
 8000986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	4313      	orrs	r3, r2
 800098c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	48028100 	.word	0x48028100

0800099c <P1_0_toggle>:

__STATIC_INLINE void P1_0_reset(void){
    PORT1->OMR = 0x00010000UL;
}

__STATIC_INLINE void P1_0_toggle(void){
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
    PORT1->OMR = 0x00010001UL;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <P1_0_toggle+0x14>)
 80009a2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80009a6:	605a      	str	r2, [r3, #4]
}
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	48028100 	.word	0x48028100

080009b4 <P3_1_set_mode>:

__STATIC_INLINE uint32_t P3_0_read(void){
    return(PORT3->IN & 0x00000001UL);
}

__STATIC_INLINE void P3_1_set_mode(uint8_t mode){
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
    PORT3->IOCR0 &= ~0x0000f800UL;
 80009be:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <P3_1_set_mode+0x30>)
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <P3_1_set_mode+0x30>)
 80009c2:	691b      	ldr	r3, [r3, #16]
 80009c4:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 80009c8:	6113      	str	r3, [r2, #16]
    PORT3->IOCR0 |= mode << 8;
 80009ca:	4906      	ldr	r1, [pc, #24]	; (80009e4 <P3_1_set_mode+0x30>)
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <P3_1_set_mode+0x30>)
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	79fa      	ldrb	r2, [r7, #7]
 80009d2:	0212      	lsls	r2, r2, #8
 80009d4:	4313      	orrs	r3, r2
 80009d6:	610b      	str	r3, [r1, #16]
}
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	48028300 	.word	0x48028300

080009e8 <P3_1_set_driver_strength>:

__STATIC_INLINE void P3_1_set_driver_strength(uint8_t strength){
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
    PORT3->PDR0 &= ~0x00000070UL;
 80009f2:	4a09      	ldr	r2, [pc, #36]	; (8000a18 <P3_1_set_driver_strength+0x30>)
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <P3_1_set_driver_strength+0x30>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
    PORT3->PDR0 |= strength << 4;
 80009fe:	4906      	ldr	r1, [pc, #24]	; (8000a18 <P3_1_set_driver_strength+0x30>)
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <P3_1_set_driver_strength+0x30>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	79fa      	ldrb	r2, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	48028300 	.word	0x48028300

08000a1c <P3_1_read>:

__STATIC_INLINE void P3_1_toggle(void){
    PORT3->OMR = 0x00020002UL;
}

__STATIC_INLINE uint32_t P3_1_read(void){
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
    return(PORT3->IN & 0x00000002UL);
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <P3_1_read+0x18>)
 8000a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a24:	f003 0302 	and.w	r3, r3, #2
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	48028300 	.word	0x48028300

08000a38 <P3_2_set_mode>:

__STATIC_INLINE void P3_2_set_mode(uint8_t mode){
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
    PORT3->IOCR0 &= ~0x00f80000UL;
 8000a42:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <P3_2_set_mode+0x30>)
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <P3_2_set_mode+0x30>)
 8000a46:	691b      	ldr	r3, [r3, #16]
 8000a48:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8000a4c:	6113      	str	r3, [r2, #16]
    PORT3->IOCR0 |= mode << 16;
 8000a4e:	4906      	ldr	r1, [pc, #24]	; (8000a68 <P3_2_set_mode+0x30>)
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <P3_2_set_mode+0x30>)
 8000a52:	691b      	ldr	r3, [r3, #16]
 8000a54:	79fa      	ldrb	r2, [r7, #7]
 8000a56:	0412      	lsls	r2, r2, #16
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	610b      	str	r3, [r1, #16]
}
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	48028300 	.word	0x48028300

08000a6c <P3_2_set_driver_strength>:

__STATIC_INLINE void P3_2_set_driver_strength(uint8_t strength){
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
    PORT3->PDR0 &= ~0x00000700UL;
 8000a76:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <P3_2_set_driver_strength+0x30>)
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <P3_2_set_driver_strength+0x30>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
    PORT3->PDR0 |= strength << 8;
 8000a82:	4906      	ldr	r1, [pc, #24]	; (8000a9c <P3_2_set_driver_strength+0x30>)
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <P3_2_set_driver_strength+0x30>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	79fa      	ldrb	r2, [r7, #7]
 8000a8a:	0212      	lsls	r2, r2, #8
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	48028300 	.word	0x48028300

08000aa0 <P3_2_read>:

__STATIC_INLINE void P3_2_toggle(void){
    PORT3->OMR = 0x00040004UL;
}

__STATIC_INLINE uint32_t P3_2_read(void){
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
    return(PORT3->IN & 0x00000004UL);
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <P3_2_read+0x18>)
 8000aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa8:	f003 0304 	and.w	r3, r3, #4
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	48028300 	.word	0x48028300

08000abc <P14_15_set_mode>:

__STATIC_INLINE uint32_t P14_14_read(void){
    return(PORT14->IN & 0x00004000UL);
}

__STATIC_INLINE void P14_15_set_mode(uint8_t mode){
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
    PORT14->IOCR12 &= ~0xf8000000UL;
 8000ac6:	4a09      	ldr	r2, [pc, #36]	; (8000aec <P14_15_set_mode+0x30>)
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <P14_15_set_mode+0x30>)
 8000aca:	69db      	ldr	r3, [r3, #28]
 8000acc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8000ad0:	61d3      	str	r3, [r2, #28]
    PORT14->IOCR12 |= mode << 24;
 8000ad2:	4906      	ldr	r1, [pc, #24]	; (8000aec <P14_15_set_mode+0x30>)
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <P14_15_set_mode+0x30>)
 8000ad6:	69db      	ldr	r3, [r3, #28]
 8000ad8:	79fa      	ldrb	r2, [r7, #7]
 8000ada:	0612      	lsls	r2, r2, #24
 8000adc:	4313      	orrs	r3, r2
 8000ade:	61cb      	str	r3, [r1, #28]
}
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	48028e00 	.word	0x48028e00

08000af0 <P14_15_enable_digital>:

__STATIC_INLINE void P14_15_enable_digital(void){
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
    PORT14->PDISC &= ~0x00008000UL;
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <P14_15_enable_digital+0x18>)
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <P14_15_enable_digital+0x18>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000afe:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	48028e00 	.word	0x48028e00

08000b0c <P15_2_set_mode>:

__STATIC_INLINE uint32_t P14_15_read(void){
    return(PORT14->IN & 0x00008000UL);
}

__STATIC_INLINE void P15_2_set_mode(uint8_t mode){
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
    PORT15->IOCR0 &= ~0x00f80000UL;
 8000b16:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <P15_2_set_mode+0x30>)
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <P15_2_set_mode+0x30>)
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8000b20:	6113      	str	r3, [r2, #16]
    PORT15->IOCR0 |= mode << 16;
 8000b22:	4906      	ldr	r1, [pc, #24]	; (8000b3c <P15_2_set_mode+0x30>)
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <P15_2_set_mode+0x30>)
 8000b26:	691b      	ldr	r3, [r3, #16]
 8000b28:	79fa      	ldrb	r2, [r7, #7]
 8000b2a:	0412      	lsls	r2, r2, #16
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	610b      	str	r3, [r1, #16]
}
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	48028f00 	.word	0x48028f00

08000b40 <P15_2_enable_digital>:

__STATIC_INLINE void P15_2_enable_digital(void){
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
    PORT15->PDISC &= ~0x00000004UL;
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <P15_2_enable_digital+0x18>)
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <P15_2_enable_digital+0x18>)
 8000b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4a:	f023 0304 	bic.w	r3, r3, #4
 8000b4e:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	48028f00 	.word	0x48028f00

08000b5c <P15_2_read>:

__STATIC_INLINE void P15_2_disable_digital(void){
    PORT15->PDISC |= 0x00000004UL;
}

__STATIC_INLINE uint32_t P15_2_read(void){
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
    return(PORT15->IN & 0x00000004UL);
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <P15_2_read+0x18>)
 8000b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b64:	f003 0304 	and.w	r3, r3, #4
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	48028f00 	.word	0x48028f00

08000b78 <delay>:
 C3 -> P1_4
 C4 -> P1_6
 ******************************************************************************
 */
#define state // to update within the systick timer
long int delay(long int n){
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	int i,j;
	for (i = 0; i < n; i++){
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	e00d      	b.n	8000ba2 <delay+0x2a>
		for (j = 0; j<7500; j++){
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	e002      	b.n	8000b92 <delay+0x1a>
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	ddf7      	ble.n	8000b8c <delay+0x14>
 ******************************************************************************
 */
#define state // to update within the systick timer
long int delay(long int n){
	int i,j;
	for (i = 0; i < n; i++){
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	dbed      	blt.n	8000b86 <delay+0xe>
		for (j = 0; j<7500; j++){

		}
	}
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <main>:
int keyCount;



int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8000bbe:	f7ff fd8b 	bl	80006d8 <DAVE_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]

  if (status != DAVE_STATUS_SUCCESS)
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d000      	beq.n	8000bce <main+0x16>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 8000bcc:	e7fe      	b.n	8000bcc <main+0x14>
  }
	/* Initialize LED2 */
	P1_0_set_mode(OUTPUT_PP_GP);
 8000bce:	2080      	movs	r0, #128	; 0x80
 8000bd0:	f7ff feb4 	bl	800093c <P1_0_set_mode>
	P1_0_set_driver_strength(STRONG);
 8000bd4:	2002      	movs	r0, #2
 8000bd6:	f7ff fec9 	bl	800096c <P1_0_set_driver_strength>

	// create matrix for the membrane pad pins (1.0 -- 1.8)
	P0_1_set_mode(INPUT_INV_PD);  //zero and even are the columns and set to HIGH or ON
 8000bda:	2028      	movs	r0, #40	; 0x28
 8000bdc:	f7ff fe04 	bl	80007e8 <P0_1_set_mode>
	P0_1_set_driver_strength(STRONG);
 8000be0:	2002      	movs	r0, #2
 8000be2:	f7ff fe1b 	bl	800081c <P0_1_set_driver_strength>
	P15_2_set_mode(INPUT_INV_PD);
 8000be6:	2028      	movs	r0, #40	; 0x28
 8000be8:	f7ff ff90 	bl	8000b0c <P15_2_set_mode>
	P15_2_enable_digital();
 8000bec:	f7ff ffa8 	bl	8000b40 <P15_2_enable_digital>
	P3_1_set_mode(INPUT_INV_PD);
 8000bf0:	2028      	movs	r0, #40	; 0x28
 8000bf2:	f7ff fedf 	bl	80009b4 <P3_1_set_mode>
	P3_1_set_driver_strength(STRONG);
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f7ff fef6 	bl	80009e8 <P3_1_set_driver_strength>
	P3_2_set_mode(INPUT_INV_PD);
 8000bfc:	2028      	movs	r0, #40	; 0x28
 8000bfe:	f7ff ff1b 	bl	8000a38 <P3_2_set_mode>
	P3_2_set_driver_strength(STRONG);
 8000c02:	2002      	movs	r0, #2
 8000c04:	f7ff ff32 	bl	8000a6c <P3_2_set_driver_strength>

	P0_9_set_mode(INPUT_PU); // Odd pins are set the rows and are set to LOW or OFF
 8000c08:	2010      	movs	r0, #16
 8000c0a:	f7ff fe2f 	bl	800086c <P0_9_set_mode>
	P0_9_set_driver_strength(STRONG);
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f7ff fe46 	bl	80008a0 <P0_9_set_driver_strength>
	P14_15_set_mode(INPUT_PU);
 8000c14:	2010      	movs	r0, #16
 8000c16:	f7ff ff51 	bl	8000abc <P14_15_set_mode>
	P14_15_enable_digital();
 8000c1a:	f7ff ff69 	bl	8000af0 <P14_15_enable_digital>
	P0_10_set_mode(INPUT_PU);
 8000c1e:	2010      	movs	r0, #16
 8000c20:	f7ff fe58 	bl	80008d4 <P0_10_set_mode>
	P0_10_set_driver_strength(STRONG);
 8000c24:	2002      	movs	r0, #2
 8000c26:	f7ff fe6f 	bl	8000908 <P0_10_set_driver_strength>
	P0_0_set_mode(INPUT_PU);
 8000c2a:	2010      	movs	r0, #16
 8000c2c:	f7ff fdac 	bl	8000788 <P0_0_set_mode>
	P0_0_set_driver_strength(STRONG);
 8000c30:	2002      	movs	r0, #2
 8000c32:	f7ff fdc1 	bl	80007b8 <P0_0_set_driver_strength>




  if(SysTick_Config(SystemCoreClock / 100UL) == 0){
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <main+0xa4>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <main+0xa8>)
 8000c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c40:	095b      	lsrs	r3, r3, #5
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fd7e 	bl	8000744 <SysTick_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d100      	bne.n	8000c50 <main+0x98>

  		/* Loop forever useful for the state so the MCU can do other stuff*/
  		for(;;) {

  		}
 8000c4e:	e7fe      	b.n	8000c4e <main+0x96>
  	}
  	else{
  		asm("BKPT 255");
 8000c50:	beff      	bkpt	0x00ff
 8000c52:	2300      	movs	r3, #0
  	}

}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2000ffc0 	.word	0x2000ffc0
 8000c60:	51eb851f 	.word	0x51eb851f

08000c64 <SysTick_Handler>:

void SysTick_Handler(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	static uint32_t ticks = 0UL;
	//Create variables for the ARRAY Button pad//

	ticks++;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <SysTick_Handler+0x84>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ce8 <SysTick_Handler+0x84>)
 8000c70:	6013      	str	r3, [r2, #0]
	printf("hello world");
 8000c72:	481e      	ldr	r0, [pc, #120]	; (8000cec <SysTick_Handler+0x88>)
 8000c74:	f000 f870 	bl	8000d58 <iprintf>
	 //first read columns
	if(P0_1_read() == 0UL ){
 8000c78:	f7ff fdea 	bl	8000850 <P0_1_read>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d108      	bne.n	8000c94 <SysTick_Handler+0x30>
		P1_0_toggle();
 8000c82:	f7ff fe8b 	bl	800099c <P1_0_toggle>
		delay(10000);
 8000c86:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c8a:	f7ff ff75 	bl	8000b78 <delay>
		P1_0_toggle();
 8000c8e:	f7ff fe85 	bl	800099c <P1_0_toggle>
 8000c92:	e028      	b.n	8000ce6 <SysTick_Handler+0x82>

	}
	else if( P15_2_read() == 0UL ){
 8000c94:	f7ff ff62 	bl	8000b5c <P15_2_read>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d108      	bne.n	8000cb0 <SysTick_Handler+0x4c>
		P1_0_toggle();
 8000c9e:	f7ff fe7d 	bl	800099c <P1_0_toggle>
		delay(10000);
 8000ca2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ca6:	f7ff ff67 	bl	8000b78 <delay>
		P1_0_toggle();
 8000caa:	f7ff fe77 	bl	800099c <P1_0_toggle>
 8000cae:	e01a      	b.n	8000ce6 <SysTick_Handler+0x82>

	}
	else if (P3_1_read() == 0UL ){
 8000cb0:	f7ff feb4 	bl	8000a1c <P3_1_read>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d108      	bne.n	8000ccc <SysTick_Handler+0x68>
		P1_0_toggle();
 8000cba:	f7ff fe6f 	bl	800099c <P1_0_toggle>
		delay(10000);
 8000cbe:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cc2:	f7ff ff59 	bl	8000b78 <delay>
		P1_0_toggle();
 8000cc6:	f7ff fe69 	bl	800099c <P1_0_toggle>
 8000cca:	e00c      	b.n	8000ce6 <SysTick_Handler+0x82>
	}
	else if (P3_2_read() == 0UL ){
 8000ccc:	f7ff fee8 	bl	8000aa0 <P3_2_read>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d107      	bne.n	8000ce6 <SysTick_Handler+0x82>
		P1_0_toggle();
 8000cd6:	f7ff fe61 	bl	800099c <P1_0_toggle>
		delay(10000);
 8000cda:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cde:	f7ff ff4b 	bl	8000b78 <delay>
		P1_0_toggle();
 8000ce2:	f7ff fe5b 	bl	800099c <P1_0_toggle>
	}
//


}
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000068 	.word	0x20000068
 8000cec:	08001b3c 	.word	0x08001b3c

08000cf0 <__errno>:
 8000cf0:	4b01      	ldr	r3, [pc, #4]	; (8000cf8 <__errno+0x8>)
 8000cf2:	6818      	ldr	r0, [r3, #0]
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000060 	.word	0x20000060

08000cfc <__libc_init_array>:
 8000cfc:	b570      	push	{r4, r5, r6, lr}
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <__libc_init_array+0x3c>)
 8000d00:	4c0e      	ldr	r4, [pc, #56]	; (8000d3c <__libc_init_array+0x40>)
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	10a4      	asrs	r4, r4, #2
 8000d06:	2500      	movs	r5, #0
 8000d08:	461e      	mov	r6, r3
 8000d0a:	42a5      	cmp	r5, r4
 8000d0c:	d004      	beq.n	8000d18 <__libc_init_array+0x1c>
 8000d0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d12:	4798      	blx	r3
 8000d14:	3501      	adds	r5, #1
 8000d16:	e7f8      	b.n	8000d0a <__libc_init_array+0xe>
 8000d18:	f7ff fcd8 	bl	80006cc <_init>
 8000d1c:	4c08      	ldr	r4, [pc, #32]	; (8000d40 <__libc_init_array+0x44>)
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <__libc_init_array+0x48>)
 8000d20:	1ae4      	subs	r4, r4, r3
 8000d22:	10a4      	asrs	r4, r4, #2
 8000d24:	2500      	movs	r5, #0
 8000d26:	461e      	mov	r6, r3
 8000d28:	42a5      	cmp	r5, r4
 8000d2a:	d004      	beq.n	8000d36 <__libc_init_array+0x3a>
 8000d2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d30:	4798      	blx	r3
 8000d32:	3501      	adds	r5, #1
 8000d34:	e7f8      	b.n	8000d28 <__libc_init_array+0x2c>
 8000d36:	bd70      	pop	{r4, r5, r6, pc}
 8000d38:	20000064 	.word	0x20000064
 8000d3c:	20000064 	.word	0x20000064
 8000d40:	20000064 	.word	0x20000064
 8000d44:	20000064 	.word	0x20000064

08000d48 <memset>:
 8000d48:	4402      	add	r2, r0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d002      	beq.n	8000d56 <memset+0xe>
 8000d50:	f803 1b01 	strb.w	r1, [r3], #1
 8000d54:	e7fa      	b.n	8000d4c <memset+0x4>
 8000d56:	4770      	bx	lr

08000d58 <iprintf>:
 8000d58:	b40f      	push	{r0, r1, r2, r3}
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <iprintf+0x2c>)
 8000d5c:	b513      	push	{r0, r1, r4, lr}
 8000d5e:	681c      	ldr	r4, [r3, #0]
 8000d60:	b124      	cbz	r4, 8000d6c <iprintf+0x14>
 8000d62:	69a3      	ldr	r3, [r4, #24]
 8000d64:	b913      	cbnz	r3, 8000d6c <iprintf+0x14>
 8000d66:	4620      	mov	r0, r4
 8000d68:	f000 f84e 	bl	8000e08 <__sinit>
 8000d6c:	ab05      	add	r3, sp, #20
 8000d6e:	4620      	mov	r0, r4
 8000d70:	68a1      	ldr	r1, [r4, #8]
 8000d72:	9a04      	ldr	r2, [sp, #16]
 8000d74:	9301      	str	r3, [sp, #4]
 8000d76:	f000 f94d 	bl	8001014 <_vfiprintf_r>
 8000d7a:	b002      	add	sp, #8
 8000d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d80:	b004      	add	sp, #16
 8000d82:	4770      	bx	lr
 8000d84:	20000060 	.word	0x20000060

08000d88 <_cleanup_r>:
 8000d88:	4901      	ldr	r1, [pc, #4]	; (8000d90 <_cleanup_r+0x8>)
 8000d8a:	f000 b8a7 	b.w	8000edc <_fwalk_reent>
 8000d8e:	bf00      	nop
 8000d90:	080018b9 	.word	0x080018b9

08000d94 <std.isra.0>:
 8000d94:	2300      	movs	r3, #0
 8000d96:	b510      	push	{r4, lr}
 8000d98:	4604      	mov	r4, r0
 8000d9a:	6003      	str	r3, [r0, #0]
 8000d9c:	6043      	str	r3, [r0, #4]
 8000d9e:	6083      	str	r3, [r0, #8]
 8000da0:	8181      	strh	r1, [r0, #12]
 8000da2:	6643      	str	r3, [r0, #100]	; 0x64
 8000da4:	81c2      	strh	r2, [r0, #14]
 8000da6:	6103      	str	r3, [r0, #16]
 8000da8:	6143      	str	r3, [r0, #20]
 8000daa:	6183      	str	r3, [r0, #24]
 8000dac:	4619      	mov	r1, r3
 8000dae:	305c      	adds	r0, #92	; 0x5c
 8000db0:	2208      	movs	r2, #8
 8000db2:	f7ff ffc9 	bl	8000d48 <memset>
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <std.isra.0+0x38>)
 8000db8:	6263      	str	r3, [r4, #36]	; 0x24
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <std.isra.0+0x3c>)
 8000dbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <std.isra.0+0x40>)
 8000dc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <std.isra.0+0x44>)
 8000dc4:	6224      	str	r4, [r4, #32]
 8000dc6:	6323      	str	r3, [r4, #48]	; 0x30
 8000dc8:	bd10      	pop	{r4, pc}
 8000dca:	bf00      	nop
 8000dcc:	08001565 	.word	0x08001565
 8000dd0:	08001587 	.word	0x08001587
 8000dd4:	080015bf 	.word	0x080015bf
 8000dd8:	080015e3 	.word	0x080015e3

08000ddc <__sfmoreglue>:
 8000ddc:	b570      	push	{r4, r5, r6, lr}
 8000dde:	2368      	movs	r3, #104	; 0x68
 8000de0:	1e4d      	subs	r5, r1, #1
 8000de2:	435d      	muls	r5, r3
 8000de4:	460e      	mov	r6, r1
 8000de6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000dea:	f000 f895 	bl	8000f18 <_malloc_r>
 8000dee:	4604      	mov	r4, r0
 8000df0:	b140      	cbz	r0, 8000e04 <__sfmoreglue+0x28>
 8000df2:	2100      	movs	r1, #0
 8000df4:	e880 0042 	stmia.w	r0, {r1, r6}
 8000df8:	300c      	adds	r0, #12
 8000dfa:	60a0      	str	r0, [r4, #8]
 8000dfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e00:	f7ff ffa2 	bl	8000d48 <memset>
 8000e04:	4620      	mov	r0, r4
 8000e06:	bd70      	pop	{r4, r5, r6, pc}

08000e08 <__sinit>:
 8000e08:	6983      	ldr	r3, [r0, #24]
 8000e0a:	b510      	push	{r4, lr}
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	bb33      	cbnz	r3, 8000e5e <__sinit+0x56>
 8000e10:	6483      	str	r3, [r0, #72]	; 0x48
 8000e12:	64c3      	str	r3, [r0, #76]	; 0x4c
 8000e14:	6503      	str	r3, [r0, #80]	; 0x50
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <__sinit+0x58>)
 8000e18:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <__sinit+0x5c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6282      	str	r2, [r0, #40]	; 0x28
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	bf04      	itt	eq
 8000e22:	2301      	moveq	r3, #1
 8000e24:	6183      	streq	r3, [r0, #24]
 8000e26:	f000 f81f 	bl	8000e68 <__sfp>
 8000e2a:	6060      	str	r0, [r4, #4]
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f000 f81b 	bl	8000e68 <__sfp>
 8000e32:	60a0      	str	r0, [r4, #8]
 8000e34:	4620      	mov	r0, r4
 8000e36:	f000 f817 	bl	8000e68 <__sfp>
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	60e0      	str	r0, [r4, #12]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	6860      	ldr	r0, [r4, #4]
 8000e42:	f7ff ffa7 	bl	8000d94 <std.isra.0>
 8000e46:	68a0      	ldr	r0, [r4, #8]
 8000e48:	2109      	movs	r1, #9
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f7ff ffa2 	bl	8000d94 <std.isra.0>
 8000e50:	68e0      	ldr	r0, [r4, #12]
 8000e52:	2112      	movs	r1, #18
 8000e54:	2202      	movs	r2, #2
 8000e56:	f7ff ff9d 	bl	8000d94 <std.isra.0>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	61a3      	str	r3, [r4, #24]
 8000e5e:	bd10      	pop	{r4, pc}
 8000e60:	08001b4c 	.word	0x08001b4c
 8000e64:	08000d89 	.word	0x08000d89

08000e68 <__sfp>:
 8000e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <__sfp+0x70>)
 8000e6c:	681e      	ldr	r6, [r3, #0]
 8000e6e:	69b3      	ldr	r3, [r6, #24]
 8000e70:	4607      	mov	r7, r0
 8000e72:	b913      	cbnz	r3, 8000e7a <__sfp+0x12>
 8000e74:	4630      	mov	r0, r6
 8000e76:	f7ff ffc7 	bl	8000e08 <__sinit>
 8000e7a:	3648      	adds	r6, #72	; 0x48
 8000e7c:	68b4      	ldr	r4, [r6, #8]
 8000e7e:	6873      	ldr	r3, [r6, #4]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	d404      	bmi.n	8000e8e <__sfp+0x26>
 8000e84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000e88:	b175      	cbz	r5, 8000ea8 <__sfp+0x40>
 8000e8a:	3468      	adds	r4, #104	; 0x68
 8000e8c:	e7f8      	b.n	8000e80 <__sfp+0x18>
 8000e8e:	6833      	ldr	r3, [r6, #0]
 8000e90:	b92b      	cbnz	r3, 8000e9e <__sfp+0x36>
 8000e92:	4638      	mov	r0, r7
 8000e94:	2104      	movs	r1, #4
 8000e96:	f7ff ffa1 	bl	8000ddc <__sfmoreglue>
 8000e9a:	6030      	str	r0, [r6, #0]
 8000e9c:	b108      	cbz	r0, 8000ea2 <__sfp+0x3a>
 8000e9e:	6836      	ldr	r6, [r6, #0]
 8000ea0:	e7ec      	b.n	8000e7c <__sfp+0x14>
 8000ea2:	230c      	movs	r3, #12
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eac:	81e3      	strh	r3, [r4, #14]
 8000eae:	2301      	movs	r3, #1
 8000eb0:	81a3      	strh	r3, [r4, #12]
 8000eb2:	6665      	str	r5, [r4, #100]	; 0x64
 8000eb4:	6025      	str	r5, [r4, #0]
 8000eb6:	60a5      	str	r5, [r4, #8]
 8000eb8:	6065      	str	r5, [r4, #4]
 8000eba:	6125      	str	r5, [r4, #16]
 8000ebc:	6165      	str	r5, [r4, #20]
 8000ebe:	61a5      	str	r5, [r4, #24]
 8000ec0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ec4:	4629      	mov	r1, r5
 8000ec6:	2208      	movs	r2, #8
 8000ec8:	f7ff ff3e 	bl	8000d48 <memset>
 8000ecc:	6365      	str	r5, [r4, #52]	; 0x34
 8000ece:	63a5      	str	r5, [r4, #56]	; 0x38
 8000ed0:	64a5      	str	r5, [r4, #72]	; 0x48
 8000ed2:	64e5      	str	r5, [r4, #76]	; 0x4c
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed8:	08001b4c 	.word	0x08001b4c

08000edc <_fwalk_reent>:
 8000edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ee0:	4680      	mov	r8, r0
 8000ee2:	4689      	mov	r9, r1
 8000ee4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000ee8:	2600      	movs	r6, #0
 8000eea:	b194      	cbz	r4, 8000f12 <_fwalk_reent+0x36>
 8000eec:	68a5      	ldr	r5, [r4, #8]
 8000eee:	6867      	ldr	r7, [r4, #4]
 8000ef0:	3f01      	subs	r7, #1
 8000ef2:	d40c      	bmi.n	8000f0e <_fwalk_reent+0x32>
 8000ef4:	89ab      	ldrh	r3, [r5, #12]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d907      	bls.n	8000f0a <_fwalk_reent+0x2e>
 8000efa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000efe:	3301      	adds	r3, #1
 8000f00:	d003      	beq.n	8000f0a <_fwalk_reent+0x2e>
 8000f02:	4640      	mov	r0, r8
 8000f04:	4629      	mov	r1, r5
 8000f06:	47c8      	blx	r9
 8000f08:	4306      	orrs	r6, r0
 8000f0a:	3568      	adds	r5, #104	; 0x68
 8000f0c:	e7f0      	b.n	8000ef0 <_fwalk_reent+0x14>
 8000f0e:	6824      	ldr	r4, [r4, #0]
 8000f10:	e7eb      	b.n	8000eea <_fwalk_reent+0xe>
 8000f12:	4630      	mov	r0, r6
 8000f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000f18 <_malloc_r>:
 8000f18:	b570      	push	{r4, r5, r6, lr}
 8000f1a:	1ccc      	adds	r4, r1, #3
 8000f1c:	f024 0403 	bic.w	r4, r4, #3
 8000f20:	3408      	adds	r4, #8
 8000f22:	2c0c      	cmp	r4, #12
 8000f24:	bf38      	it	cc
 8000f26:	240c      	movcc	r4, #12
 8000f28:	2c00      	cmp	r4, #0
 8000f2a:	4606      	mov	r6, r0
 8000f2c:	da03      	bge.n	8000f36 <_malloc_r+0x1e>
 8000f2e:	230c      	movs	r3, #12
 8000f30:	6033      	str	r3, [r6, #0]
 8000f32:	2000      	movs	r0, #0
 8000f34:	bd70      	pop	{r4, r5, r6, pc}
 8000f36:	428c      	cmp	r4, r1
 8000f38:	d3f9      	bcc.n	8000f2e <_malloc_r+0x16>
 8000f3a:	4a20      	ldr	r2, [pc, #128]	; (8000fbc <_malloc_r+0xa4>)
 8000f3c:	6813      	ldr	r3, [r2, #0]
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	b1a1      	cbz	r1, 8000f6e <_malloc_r+0x56>
 8000f44:	680a      	ldr	r2, [r1, #0]
 8000f46:	1b12      	subs	r2, r2, r4
 8000f48:	d40e      	bmi.n	8000f68 <_malloc_r+0x50>
 8000f4a:	2a0b      	cmp	r2, #11
 8000f4c:	d903      	bls.n	8000f56 <_malloc_r+0x3e>
 8000f4e:	600a      	str	r2, [r1, #0]
 8000f50:	188b      	adds	r3, r1, r2
 8000f52:	508c      	str	r4, [r1, r2]
 8000f54:	e01f      	b.n	8000f96 <_malloc_r+0x7e>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	bf0d      	iteet	eq
 8000f5a:	685a      	ldreq	r2, [r3, #4]
 8000f5c:	684a      	ldrne	r2, [r1, #4]
 8000f5e:	605a      	strne	r2, [r3, #4]
 8000f60:	6002      	streq	r2, [r0, #0]
 8000f62:	bf18      	it	ne
 8000f64:	460b      	movne	r3, r1
 8000f66:	e016      	b.n	8000f96 <_malloc_r+0x7e>
 8000f68:	460b      	mov	r3, r1
 8000f6a:	6849      	ldr	r1, [r1, #4]
 8000f6c:	e7e9      	b.n	8000f42 <_malloc_r+0x2a>
 8000f6e:	4d14      	ldr	r5, [pc, #80]	; (8000fc0 <_malloc_r+0xa8>)
 8000f70:	682b      	ldr	r3, [r5, #0]
 8000f72:	b91b      	cbnz	r3, 8000f7c <_malloc_r+0x64>
 8000f74:	4630      	mov	r0, r6
 8000f76:	f000 fae5 	bl	8001544 <_sbrk_r>
 8000f7a:	6028      	str	r0, [r5, #0]
 8000f7c:	4630      	mov	r0, r6
 8000f7e:	4621      	mov	r1, r4
 8000f80:	f000 fae0 	bl	8001544 <_sbrk_r>
 8000f84:	1c42      	adds	r2, r0, #1
 8000f86:	4603      	mov	r3, r0
 8000f88:	d0d1      	beq.n	8000f2e <_malloc_r+0x16>
 8000f8a:	1cc5      	adds	r5, r0, #3
 8000f8c:	f025 0503 	bic.w	r5, r5, #3
 8000f90:	4285      	cmp	r5, r0
 8000f92:	d10a      	bne.n	8000faa <_malloc_r+0x92>
 8000f94:	601c      	str	r4, [r3, #0]
 8000f96:	f103 000b 	add.w	r0, r3, #11
 8000f9a:	1d1a      	adds	r2, r3, #4
 8000f9c:	f020 0007 	bic.w	r0, r0, #7
 8000fa0:	1a82      	subs	r2, r0, r2
 8000fa2:	d00a      	beq.n	8000fba <_malloc_r+0xa2>
 8000fa4:	4251      	negs	r1, r2
 8000fa6:	5099      	str	r1, [r3, r2]
 8000fa8:	bd70      	pop	{r4, r5, r6, pc}
 8000faa:	4630      	mov	r0, r6
 8000fac:	1ae9      	subs	r1, r5, r3
 8000fae:	f000 fac9 	bl	8001544 <_sbrk_r>
 8000fb2:	3001      	adds	r0, #1
 8000fb4:	d0bb      	beq.n	8000f2e <_malloc_r+0x16>
 8000fb6:	462b      	mov	r3, r5
 8000fb8:	e7ec      	b.n	8000f94 <_malloc_r+0x7c>
 8000fba:	bd70      	pop	{r4, r5, r6, pc}
 8000fbc:	20000070 	.word	0x20000070
 8000fc0:	2000006c 	.word	0x2000006c

08000fc4 <__sfputc_r>:
 8000fc4:	6893      	ldr	r3, [r2, #8]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	b510      	push	{r4, lr}
 8000fcc:	6093      	str	r3, [r2, #8]
 8000fce:	da09      	bge.n	8000fe4 <__sfputc_r+0x20>
 8000fd0:	6994      	ldr	r4, [r2, #24]
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	db02      	blt.n	8000fdc <__sfputc_r+0x18>
 8000fd6:	b2cb      	uxtb	r3, r1
 8000fd8:	2b0a      	cmp	r3, #10
 8000fda:	d103      	bne.n	8000fe4 <__sfputc_r+0x20>
 8000fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fe0:	f000 bb04 	b.w	80015ec <__swbuf_r>
 8000fe4:	6813      	ldr	r3, [r2, #0]
 8000fe6:	1c58      	adds	r0, r3, #1
 8000fe8:	6010      	str	r0, [r2, #0]
 8000fea:	7019      	strb	r1, [r3, #0]
 8000fec:	b2c8      	uxtb	r0, r1
 8000fee:	bd10      	pop	{r4, pc}

08000ff0 <__sfputs_r>:
 8000ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff2:	4606      	mov	r6, r0
 8000ff4:	460f      	mov	r7, r1
 8000ff6:	4614      	mov	r4, r2
 8000ff8:	18d5      	adds	r5, r2, r3
 8000ffa:	42ac      	cmp	r4, r5
 8000ffc:	d008      	beq.n	8001010 <__sfputs_r+0x20>
 8000ffe:	4630      	mov	r0, r6
 8001000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001004:	463a      	mov	r2, r7
 8001006:	f7ff ffdd 	bl	8000fc4 <__sfputc_r>
 800100a:	1c43      	adds	r3, r0, #1
 800100c:	d1f5      	bne.n	8000ffa <__sfputs_r+0xa>
 800100e:	e000      	b.n	8001012 <__sfputs_r+0x22>
 8001010:	2000      	movs	r0, #0
 8001012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001014 <_vfiprintf_r>:
 8001014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001018:	b09d      	sub	sp, #116	; 0x74
 800101a:	460d      	mov	r5, r1
 800101c:	4690      	mov	r8, r2
 800101e:	9303      	str	r3, [sp, #12]
 8001020:	4606      	mov	r6, r0
 8001022:	b118      	cbz	r0, 800102c <_vfiprintf_r+0x18>
 8001024:	6983      	ldr	r3, [r0, #24]
 8001026:	b90b      	cbnz	r3, 800102c <_vfiprintf_r+0x18>
 8001028:	f7ff feee 	bl	8000e08 <__sinit>
 800102c:	4b75      	ldr	r3, [pc, #468]	; (8001204 <_vfiprintf_r+0x1f0>)
 800102e:	429d      	cmp	r5, r3
 8001030:	d101      	bne.n	8001036 <_vfiprintf_r+0x22>
 8001032:	6875      	ldr	r5, [r6, #4]
 8001034:	e008      	b.n	8001048 <_vfiprintf_r+0x34>
 8001036:	4b74      	ldr	r3, [pc, #464]	; (8001208 <_vfiprintf_r+0x1f4>)
 8001038:	429d      	cmp	r5, r3
 800103a:	d101      	bne.n	8001040 <_vfiprintf_r+0x2c>
 800103c:	68b5      	ldr	r5, [r6, #8]
 800103e:	e003      	b.n	8001048 <_vfiprintf_r+0x34>
 8001040:	4b72      	ldr	r3, [pc, #456]	; (800120c <_vfiprintf_r+0x1f8>)
 8001042:	429d      	cmp	r5, r3
 8001044:	bf08      	it	eq
 8001046:	68f5      	ldreq	r5, [r6, #12]
 8001048:	89ab      	ldrh	r3, [r5, #12]
 800104a:	071c      	lsls	r4, r3, #28
 800104c:	d50a      	bpl.n	8001064 <_vfiprintf_r+0x50>
 800104e:	692b      	ldr	r3, [r5, #16]
 8001050:	b143      	cbz	r3, 8001064 <_vfiprintf_r+0x50>
 8001052:	2300      	movs	r3, #0
 8001054:	9309      	str	r3, [sp, #36]	; 0x24
 8001056:	2320      	movs	r3, #32
 8001058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800105c:	2330      	movs	r3, #48	; 0x30
 800105e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001062:	e041      	b.n	80010e8 <_vfiprintf_r+0xd4>
 8001064:	4630      	mov	r0, r6
 8001066:	4629      	mov	r1, r5
 8001068:	f000 fb26 	bl	80016b8 <__swsetup_r>
 800106c:	2800      	cmp	r0, #0
 800106e:	d0f0      	beq.n	8001052 <_vfiprintf_r+0x3e>
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	e0c2      	b.n	80011fc <_vfiprintf_r+0x1e8>
 8001076:	9a03      	ldr	r2, [sp, #12]
 8001078:	1d11      	adds	r1, r2, #4
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	9103      	str	r1, [sp, #12]
 800107e:	2a00      	cmp	r2, #0
 8001080:	bfbb      	ittet	lt
 8001082:	4252      	neglt	r2, r2
 8001084:	f043 0302 	orrlt.w	r3, r3, #2
 8001088:	9207      	strge	r2, [sp, #28]
 800108a:	9207      	strlt	r2, [sp, #28]
 800108c:	bfb8      	it	lt
 800108e:	9304      	strlt	r3, [sp, #16]
 8001090:	3401      	adds	r4, #1
 8001092:	7823      	ldrb	r3, [r4, #0]
 8001094:	2b2e      	cmp	r3, #46	; 0x2e
 8001096:	d07b      	beq.n	8001190 <_vfiprintf_r+0x17c>
 8001098:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800121c <_vfiprintf_r+0x208>
 800109c:	7821      	ldrb	r1, [r4, #0]
 800109e:	4640      	mov	r0, r8
 80010a0:	2203      	movs	r2, #3
 80010a2:	f000 fc93 	bl	80019cc <memchr>
 80010a6:	b138      	cbz	r0, 80010b8 <_vfiprintf_r+0xa4>
 80010a8:	9a04      	ldr	r2, [sp, #16]
 80010aa:	ebc8 0000 	rsb	r0, r8, r0
 80010ae:	2340      	movs	r3, #64	; 0x40
 80010b0:	4083      	lsls	r3, r0
 80010b2:	4313      	orrs	r3, r2
 80010b4:	9304      	str	r3, [sp, #16]
 80010b6:	3401      	adds	r4, #1
 80010b8:	7821      	ldrb	r1, [r4, #0]
 80010ba:	4855      	ldr	r0, [pc, #340]	; (8001210 <_vfiprintf_r+0x1fc>)
 80010bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80010c0:	2206      	movs	r2, #6
 80010c2:	f104 0801 	add.w	r8, r4, #1
 80010c6:	f000 fc81 	bl	80019cc <memchr>
 80010ca:	2800      	cmp	r0, #0
 80010cc:	f000 8085 	beq.w	80011da <_vfiprintf_r+0x1c6>
 80010d0:	4b50      	ldr	r3, [pc, #320]	; (8001214 <_vfiprintf_r+0x200>)
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d178      	bne.n	80011c8 <_vfiprintf_r+0x1b4>
 80010d6:	9b03      	ldr	r3, [sp, #12]
 80010d8:	3307      	adds	r3, #7
 80010da:	f023 0307 	bic.w	r3, r3, #7
 80010de:	3308      	adds	r3, #8
 80010e0:	9303      	str	r3, [sp, #12]
 80010e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010e4:	443b      	add	r3, r7
 80010e6:	9309      	str	r3, [sp, #36]	; 0x24
 80010e8:	4643      	mov	r3, r8
 80010ea:	461c      	mov	r4, r3
 80010ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80010f0:	b91a      	cbnz	r2, 80010fa <_vfiprintf_r+0xe6>
 80010f2:	ebb4 0908 	subs.w	r9, r4, r8
 80010f6:	d00e      	beq.n	8001116 <_vfiprintf_r+0x102>
 80010f8:	e002      	b.n	8001100 <_vfiprintf_r+0xec>
 80010fa:	2a25      	cmp	r2, #37	; 0x25
 80010fc:	d1f5      	bne.n	80010ea <_vfiprintf_r+0xd6>
 80010fe:	e7f8      	b.n	80010f2 <_vfiprintf_r+0xde>
 8001100:	4630      	mov	r0, r6
 8001102:	4629      	mov	r1, r5
 8001104:	4642      	mov	r2, r8
 8001106:	464b      	mov	r3, r9
 8001108:	f7ff ff72 	bl	8000ff0 <__sfputs_r>
 800110c:	3001      	adds	r0, #1
 800110e:	d070      	beq.n	80011f2 <_vfiprintf_r+0x1de>
 8001110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001112:	444b      	add	r3, r9
 8001114:	9309      	str	r3, [sp, #36]	; 0x24
 8001116:	7823      	ldrb	r3, [r4, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d06a      	beq.n	80011f2 <_vfiprintf_r+0x1de>
 800111c:	2300      	movs	r3, #0
 800111e:	f04f 32ff 	mov.w	r2, #4294967295
 8001122:	9304      	str	r3, [sp, #16]
 8001124:	9307      	str	r3, [sp, #28]
 8001126:	9205      	str	r2, [sp, #20]
 8001128:	9306      	str	r3, [sp, #24]
 800112a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800112e:	931a      	str	r3, [sp, #104]	; 0x68
 8001130:	f104 0801 	add.w	r8, r4, #1
 8001134:	4644      	mov	r4, r8
 8001136:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8001220 <_vfiprintf_r+0x20c>
 800113a:	7821      	ldrb	r1, [r4, #0]
 800113c:	4648      	mov	r0, r9
 800113e:	2205      	movs	r2, #5
 8001140:	f000 fc44 	bl	80019cc <memchr>
 8001144:	f108 0801 	add.w	r8, r8, #1
 8001148:	9b04      	ldr	r3, [sp, #16]
 800114a:	b130      	cbz	r0, 800115a <_vfiprintf_r+0x146>
 800114c:	ebc9 0000 	rsb	r0, r9, r0
 8001150:	2201      	movs	r2, #1
 8001152:	4082      	lsls	r2, r0
 8001154:	4313      	orrs	r3, r2
 8001156:	9304      	str	r3, [sp, #16]
 8001158:	e7ec      	b.n	8001134 <_vfiprintf_r+0x120>
 800115a:	06d8      	lsls	r0, r3, #27
 800115c:	bf44      	itt	mi
 800115e:	2220      	movmi	r2, #32
 8001160:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001164:	0719      	lsls	r1, r3, #28
 8001166:	bf44      	itt	mi
 8001168:	222b      	movmi	r2, #43	; 0x2b
 800116a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800116e:	7822      	ldrb	r2, [r4, #0]
 8001170:	2a2a      	cmp	r2, #42	; 0x2a
 8001172:	d080      	beq.n	8001076 <_vfiprintf_r+0x62>
 8001174:	9907      	ldr	r1, [sp, #28]
 8001176:	4623      	mov	r3, r4
 8001178:	461c      	mov	r4, r3
 800117a:	3301      	adds	r3, #1
 800117c:	7822      	ldrb	r2, [r4, #0]
 800117e:	3a30      	subs	r2, #48	; 0x30
 8001180:	2a09      	cmp	r2, #9
 8001182:	d803      	bhi.n	800118c <_vfiprintf_r+0x178>
 8001184:	200a      	movs	r0, #10
 8001186:	fb00 2101 	mla	r1, r0, r1, r2
 800118a:	e7f5      	b.n	8001178 <_vfiprintf_r+0x164>
 800118c:	9107      	str	r1, [sp, #28]
 800118e:	e780      	b.n	8001092 <_vfiprintf_r+0x7e>
 8001190:	7863      	ldrb	r3, [r4, #1]
 8001192:	2b2a      	cmp	r3, #42	; 0x2a
 8001194:	d10a      	bne.n	80011ac <_vfiprintf_r+0x198>
 8001196:	9b03      	ldr	r3, [sp, #12]
 8001198:	1d1a      	adds	r2, r3, #4
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	9203      	str	r2, [sp, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	bfb8      	it	lt
 80011a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80011a6:	3402      	adds	r4, #2
 80011a8:	9305      	str	r3, [sp, #20]
 80011aa:	e775      	b.n	8001098 <_vfiprintf_r+0x84>
 80011ac:	1c61      	adds	r1, r4, #1
 80011ae:	2200      	movs	r2, #0
 80011b0:	460c      	mov	r4, r1
 80011b2:	3101      	adds	r1, #1
 80011b4:	7823      	ldrb	r3, [r4, #0]
 80011b6:	3b30      	subs	r3, #48	; 0x30
 80011b8:	2b09      	cmp	r3, #9
 80011ba:	d803      	bhi.n	80011c4 <_vfiprintf_r+0x1b0>
 80011bc:	200a      	movs	r0, #10
 80011be:	fb00 3202 	mla	r2, r0, r2, r3
 80011c2:	e7f5      	b.n	80011b0 <_vfiprintf_r+0x19c>
 80011c4:	9205      	str	r2, [sp, #20]
 80011c6:	e767      	b.n	8001098 <_vfiprintf_r+0x84>
 80011c8:	ab03      	add	r3, sp, #12
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	4630      	mov	r0, r6
 80011ce:	a904      	add	r1, sp, #16
 80011d0:	462a      	mov	r2, r5
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <_vfiprintf_r+0x204>)
 80011d4:	f3af 8000 	nop.w
 80011d8:	e007      	b.n	80011ea <_vfiprintf_r+0x1d6>
 80011da:	ab03      	add	r3, sp, #12
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	4630      	mov	r0, r6
 80011e0:	a904      	add	r1, sp, #16
 80011e2:	462a      	mov	r2, r5
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <_vfiprintf_r+0x204>)
 80011e6:	f000 f893 	bl	8001310 <_printf_i>
 80011ea:	1c42      	adds	r2, r0, #1
 80011ec:	4607      	mov	r7, r0
 80011ee:	f47f af78 	bne.w	80010e2 <_vfiprintf_r+0xce>
 80011f2:	89ab      	ldrh	r3, [r5, #12]
 80011f4:	065b      	lsls	r3, r3, #25
 80011f6:	f53f af3b 	bmi.w	8001070 <_vfiprintf_r+0x5c>
 80011fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80011fc:	b01d      	add	sp, #116	; 0x74
 80011fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001202:	bf00      	nop
 8001204:	08001b50 	.word	0x08001b50
 8001208:	08001b70 	.word	0x08001b70
 800120c:	08001b90 	.word	0x08001b90
 8001210:	08001bba 	.word	0x08001bba
 8001214:	00000000 	.word	0x00000000
 8001218:	08000ff1 	.word	0x08000ff1
 800121c:	08001bb6 	.word	0x08001bb6
 8001220:	08001bb0 	.word	0x08001bb0

08001224 <_printf_common>:
 8001224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001228:	4691      	mov	r9, r2
 800122a:	461f      	mov	r7, r3
 800122c:	688a      	ldr	r2, [r1, #8]
 800122e:	690b      	ldr	r3, [r1, #16]
 8001230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001234:	4293      	cmp	r3, r2
 8001236:	bfb8      	it	lt
 8001238:	4613      	movlt	r3, r2
 800123a:	f8c9 3000 	str.w	r3, [r9]
 800123e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001242:	4606      	mov	r6, r0
 8001244:	460c      	mov	r4, r1
 8001246:	b112      	cbz	r2, 800124e <_printf_common+0x2a>
 8001248:	3301      	adds	r3, #1
 800124a:	f8c9 3000 	str.w	r3, [r9]
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	0699      	lsls	r1, r3, #26
 8001252:	bf42      	ittt	mi
 8001254:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001258:	3302      	addmi	r3, #2
 800125a:	f8c9 3000 	strmi.w	r3, [r9]
 800125e:	6825      	ldr	r5, [r4, #0]
 8001260:	f015 0506 	ands.w	r5, r5, #6
 8001264:	d01c      	beq.n	80012a0 <_printf_common+0x7c>
 8001266:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800126a:	6822      	ldr	r2, [r4, #0]
 800126c:	3300      	adds	r3, #0
 800126e:	bf18      	it	ne
 8001270:	2301      	movne	r3, #1
 8001272:	0692      	lsls	r2, r2, #26
 8001274:	d51f      	bpl.n	80012b6 <_printf_common+0x92>
 8001276:	18e1      	adds	r1, r4, r3
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	2030      	movs	r0, #48	; 0x30
 800127c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001280:	4422      	add	r2, r4
 8001282:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001286:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800128a:	3302      	adds	r3, #2
 800128c:	e013      	b.n	80012b6 <_printf_common+0x92>
 800128e:	4630      	mov	r0, r6
 8001290:	4639      	mov	r1, r7
 8001292:	f104 0219 	add.w	r2, r4, #25
 8001296:	2301      	movs	r3, #1
 8001298:	47c0      	blx	r8
 800129a:	3001      	adds	r0, #1
 800129c:	d007      	beq.n	80012ae <_printf_common+0x8a>
 800129e:	3501      	adds	r5, #1
 80012a0:	68e3      	ldr	r3, [r4, #12]
 80012a2:	f8d9 2000 	ldr.w	r2, [r9]
 80012a6:	1a9b      	subs	r3, r3, r2
 80012a8:	429d      	cmp	r5, r3
 80012aa:	dbf0      	blt.n	800128e <_printf_common+0x6a>
 80012ac:	e7db      	b.n	8001266 <_printf_common+0x42>
 80012ae:	f04f 30ff 	mov.w	r0, #4294967295
 80012b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012b6:	4630      	mov	r0, r6
 80012b8:	4639      	mov	r1, r7
 80012ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80012be:	47c0      	blx	r8
 80012c0:	3001      	adds	r0, #1
 80012c2:	d0f4      	beq.n	80012ae <_printf_common+0x8a>
 80012c4:	6822      	ldr	r2, [r4, #0]
 80012c6:	f8d9 5000 	ldr.w	r5, [r9]
 80012ca:	68e3      	ldr	r3, [r4, #12]
 80012cc:	f002 0206 	and.w	r2, r2, #6
 80012d0:	2a04      	cmp	r2, #4
 80012d2:	bf08      	it	eq
 80012d4:	1b5d      	subeq	r5, r3, r5
 80012d6:	6922      	ldr	r2, [r4, #16]
 80012d8:	68a3      	ldr	r3, [r4, #8]
 80012da:	bf0c      	ite	eq
 80012dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80012e0:	2500      	movne	r5, #0
 80012e2:	4293      	cmp	r3, r2
 80012e4:	bfc4      	itt	gt
 80012e6:	1a9b      	subgt	r3, r3, r2
 80012e8:	18ed      	addgt	r5, r5, r3
 80012ea:	f04f 0900 	mov.w	r9, #0
 80012ee:	45a9      	cmp	r9, r5
 80012f0:	da0a      	bge.n	8001308 <_printf_common+0xe4>
 80012f2:	4630      	mov	r0, r6
 80012f4:	4639      	mov	r1, r7
 80012f6:	f104 021a 	add.w	r2, r4, #26
 80012fa:	2301      	movs	r3, #1
 80012fc:	47c0      	blx	r8
 80012fe:	3001      	adds	r0, #1
 8001300:	d0d5      	beq.n	80012ae <_printf_common+0x8a>
 8001302:	f109 0901 	add.w	r9, r9, #1
 8001306:	e7f2      	b.n	80012ee <_printf_common+0xca>
 8001308:	2000      	movs	r0, #0
 800130a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001310 <_printf_i>:
 8001310:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001314:	460c      	mov	r4, r1
 8001316:	4617      	mov	r7, r2
 8001318:	7e22      	ldrb	r2, [r4, #24]
 800131a:	2a6e      	cmp	r2, #110	; 0x6e
 800131c:	4698      	mov	r8, r3
 800131e:	4606      	mov	r6, r0
 8001320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001322:	f101 0143 	add.w	r1, r1, #67	; 0x43
 8001326:	f000 80a9 	beq.w	800147c <_printf_i+0x16c>
 800132a:	d812      	bhi.n	8001352 <_printf_i+0x42>
 800132c:	2a63      	cmp	r2, #99	; 0x63
 800132e:	d023      	beq.n	8001378 <_printf_i+0x68>
 8001330:	d80a      	bhi.n	8001348 <_printf_i+0x38>
 8001332:	2a00      	cmp	r2, #0
 8001334:	f000 80b6 	beq.w	80014a4 <_printf_i+0x194>
 8001338:	2a58      	cmp	r2, #88	; 0x58
 800133a:	f040 80c5 	bne.w	80014c8 <_printf_i+0x1b8>
 800133e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001342:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 800153c <_printf_i+0x22c>
 8001346:	e051      	b.n	80013ec <_printf_i+0xdc>
 8001348:	2a64      	cmp	r2, #100	; 0x64
 800134a:	d01e      	beq.n	800138a <_printf_i+0x7a>
 800134c:	2a69      	cmp	r2, #105	; 0x69
 800134e:	d01c      	beq.n	800138a <_printf_i+0x7a>
 8001350:	e0ba      	b.n	80014c8 <_printf_i+0x1b8>
 8001352:	2a73      	cmp	r2, #115	; 0x73
 8001354:	f000 80aa 	beq.w	80014ac <_printf_i+0x19c>
 8001358:	d809      	bhi.n	800136e <_printf_i+0x5e>
 800135a:	2a6f      	cmp	r2, #111	; 0x6f
 800135c:	d02b      	beq.n	80013b6 <_printf_i+0xa6>
 800135e:	2a70      	cmp	r2, #112	; 0x70
 8001360:	f040 80b2 	bne.w	80014c8 <_printf_i+0x1b8>
 8001364:	6822      	ldr	r2, [r4, #0]
 8001366:	f042 0220 	orr.w	r2, r2, #32
 800136a:	6022      	str	r2, [r4, #0]
 800136c:	e039      	b.n	80013e2 <_printf_i+0xd2>
 800136e:	2a75      	cmp	r2, #117	; 0x75
 8001370:	d021      	beq.n	80013b6 <_printf_i+0xa6>
 8001372:	2a78      	cmp	r2, #120	; 0x78
 8001374:	d035      	beq.n	80013e2 <_printf_i+0xd2>
 8001376:	e0a7      	b.n	80014c8 <_printf_i+0x1b8>
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	1d11      	adds	r1, r2, #4
 800137c:	6019      	str	r1, [r3, #0]
 800137e:	6813      	ldr	r3, [r2, #0]
 8001380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001388:	e0a2      	b.n	80014d0 <_printf_i+0x1c0>
 800138a:	6820      	ldr	r0, [r4, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001392:	d003      	beq.n	800139c <_printf_i+0x8c>
 8001394:	1d10      	adds	r0, r2, #4
 8001396:	6018      	str	r0, [r3, #0]
 8001398:	6813      	ldr	r3, [r2, #0]
 800139a:	e005      	b.n	80013a8 <_printf_i+0x98>
 800139c:	0645      	lsls	r5, r0, #25
 800139e:	d5f9      	bpl.n	8001394 <_printf_i+0x84>
 80013a0:	1d10      	adds	r0, r2, #4
 80013a2:	6018      	str	r0, [r3, #0]
 80013a4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	da3b      	bge.n	8001424 <_printf_i+0x114>
 80013ac:	222d      	movs	r2, #45	; 0x2d
 80013ae:	425b      	negs	r3, r3
 80013b0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80013b4:	e036      	b.n	8001424 <_printf_i+0x114>
 80013b6:	6820      	ldr	r0, [r4, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	f010 0f80 	tst.w	r0, #128	; 0x80
 80013be:	d003      	beq.n	80013c8 <_printf_i+0xb8>
 80013c0:	1d10      	adds	r0, r2, #4
 80013c2:	6018      	str	r0, [r3, #0]
 80013c4:	6813      	ldr	r3, [r2, #0]
 80013c6:	e004      	b.n	80013d2 <_printf_i+0xc2>
 80013c8:	0640      	lsls	r0, r0, #25
 80013ca:	d5f9      	bpl.n	80013c0 <_printf_i+0xb0>
 80013cc:	1d10      	adds	r0, r2, #4
 80013ce:	6018      	str	r0, [r3, #0]
 80013d0:	8813      	ldrh	r3, [r2, #0]
 80013d2:	7e22      	ldrb	r2, [r4, #24]
 80013d4:	f8df e164 	ldr.w	lr, [pc, #356]	; 800153c <_printf_i+0x22c>
 80013d8:	2a6f      	cmp	r2, #111	; 0x6f
 80013da:	bf0c      	ite	eq
 80013dc:	2208      	moveq	r2, #8
 80013de:	220a      	movne	r2, #10
 80013e0:	e01c      	b.n	800141c <_printf_i+0x10c>
 80013e2:	2278      	movs	r2, #120	; 0x78
 80013e4:	f8df e158 	ldr.w	lr, [pc, #344]	; 8001540 <_printf_i+0x230>
 80013e8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80013ec:	6822      	ldr	r2, [r4, #0]
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80013f4:	f100 0504 	add.w	r5, r0, #4
 80013f8:	601d      	str	r5, [r3, #0]
 80013fa:	d001      	beq.n	8001400 <_printf_i+0xf0>
 80013fc:	6803      	ldr	r3, [r0, #0]
 80013fe:	e002      	b.n	8001406 <_printf_i+0xf6>
 8001400:	0655      	lsls	r5, r2, #25
 8001402:	d5fb      	bpl.n	80013fc <_printf_i+0xec>
 8001404:	8803      	ldrh	r3, [r0, #0]
 8001406:	07d0      	lsls	r0, r2, #31
 8001408:	bf44      	itt	mi
 800140a:	f042 0220 	orrmi.w	r2, r2, #32
 800140e:	6022      	strmi	r2, [r4, #0]
 8001410:	b91b      	cbnz	r3, 800141a <_printf_i+0x10a>
 8001412:	6822      	ldr	r2, [r4, #0]
 8001414:	f022 0220 	bic.w	r2, r2, #32
 8001418:	6022      	str	r2, [r4, #0]
 800141a:	2210      	movs	r2, #16
 800141c:	2000      	movs	r0, #0
 800141e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001422:	e002      	b.n	800142a <_printf_i+0x11a>
 8001424:	f8df e114 	ldr.w	lr, [pc, #276]	; 800153c <_printf_i+0x22c>
 8001428:	220a      	movs	r2, #10
 800142a:	6865      	ldr	r5, [r4, #4]
 800142c:	60a5      	str	r5, [r4, #8]
 800142e:	2d00      	cmp	r5, #0
 8001430:	bfa2      	ittt	ge
 8001432:	6820      	ldrge	r0, [r4, #0]
 8001434:	f020 0004 	bicge.w	r0, r0, #4
 8001438:	6020      	strge	r0, [r4, #0]
 800143a:	b903      	cbnz	r3, 800143e <_printf_i+0x12e>
 800143c:	b165      	cbz	r5, 8001458 <_printf_i+0x148>
 800143e:	460d      	mov	r5, r1
 8001440:	fbb3 f0f2 	udiv	r0, r3, r2
 8001444:	fb02 3310 	mls	r3, r2, r0, r3
 8001448:	f81e 3003 	ldrb.w	r3, [lr, r3]
 800144c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001450:	4603      	mov	r3, r0
 8001452:	2800      	cmp	r0, #0
 8001454:	d1f4      	bne.n	8001440 <_printf_i+0x130>
 8001456:	e000      	b.n	800145a <_printf_i+0x14a>
 8001458:	460d      	mov	r5, r1
 800145a:	2a08      	cmp	r2, #8
 800145c:	d10b      	bne.n	8001476 <_printf_i+0x166>
 800145e:	6823      	ldr	r3, [r4, #0]
 8001460:	07da      	lsls	r2, r3, #31
 8001462:	d508      	bpl.n	8001476 <_printf_i+0x166>
 8001464:	6923      	ldr	r3, [r4, #16]
 8001466:	6862      	ldr	r2, [r4, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	bfde      	ittt	le
 800146c:	2330      	movle	r3, #48	; 0x30
 800146e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001472:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001476:	1b49      	subs	r1, r1, r5
 8001478:	6121      	str	r1, [r4, #16]
 800147a:	e02e      	b.n	80014da <_printf_i+0x1ca>
 800147c:	6825      	ldr	r5, [r4, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	6960      	ldr	r0, [r4, #20]
 8001482:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001486:	d003      	beq.n	8001490 <_printf_i+0x180>
 8001488:	1d15      	adds	r5, r2, #4
 800148a:	601d      	str	r5, [r3, #0]
 800148c:	6813      	ldr	r3, [r2, #0]
 800148e:	e008      	b.n	80014a2 <_printf_i+0x192>
 8001490:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001494:	f102 0504 	add.w	r5, r2, #4
 8001498:	601d      	str	r5, [r3, #0]
 800149a:	6813      	ldr	r3, [r2, #0]
 800149c:	d001      	beq.n	80014a2 <_printf_i+0x192>
 800149e:	8018      	strh	r0, [r3, #0]
 80014a0:	e000      	b.n	80014a4 <_printf_i+0x194>
 80014a2:	6018      	str	r0, [r3, #0]
 80014a4:	2300      	movs	r3, #0
 80014a6:	6123      	str	r3, [r4, #16]
 80014a8:	460d      	mov	r5, r1
 80014aa:	e016      	b.n	80014da <_printf_i+0x1ca>
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	1d11      	adds	r1, r2, #4
 80014b0:	6019      	str	r1, [r3, #0]
 80014b2:	6815      	ldr	r5, [r2, #0]
 80014b4:	6862      	ldr	r2, [r4, #4]
 80014b6:	4628      	mov	r0, r5
 80014b8:	2100      	movs	r1, #0
 80014ba:	f000 fa87 	bl	80019cc <memchr>
 80014be:	b108      	cbz	r0, 80014c4 <_printf_i+0x1b4>
 80014c0:	1b40      	subs	r0, r0, r5
 80014c2:	6060      	str	r0, [r4, #4]
 80014c4:	6863      	ldr	r3, [r4, #4]
 80014c6:	e004      	b.n	80014d2 <_printf_i+0x1c2>
 80014c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80014cc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80014d0:	2301      	movs	r3, #1
 80014d2:	6123      	str	r3, [r4, #16]
 80014d4:	2300      	movs	r3, #0
 80014d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014da:	f8cd 8000 	str.w	r8, [sp]
 80014de:	4630      	mov	r0, r6
 80014e0:	4621      	mov	r1, r4
 80014e2:	aa03      	add	r2, sp, #12
 80014e4:	463b      	mov	r3, r7
 80014e6:	f7ff fe9d 	bl	8001224 <_printf_common>
 80014ea:	3001      	adds	r0, #1
 80014ec:	d102      	bne.n	80014f4 <_printf_i+0x1e4>
 80014ee:	f04f 30ff 	mov.w	r0, #4294967295
 80014f2:	e01f      	b.n	8001534 <_printf_i+0x224>
 80014f4:	4630      	mov	r0, r6
 80014f6:	4639      	mov	r1, r7
 80014f8:	462a      	mov	r2, r5
 80014fa:	6923      	ldr	r3, [r4, #16]
 80014fc:	47c0      	blx	r8
 80014fe:	3001      	adds	r0, #1
 8001500:	d0f5      	beq.n	80014ee <_printf_i+0x1de>
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	079b      	lsls	r3, r3, #30
 8001506:	d405      	bmi.n	8001514 <_printf_i+0x204>
 8001508:	68e0      	ldr	r0, [r4, #12]
 800150a:	9b03      	ldr	r3, [sp, #12]
 800150c:	4298      	cmp	r0, r3
 800150e:	bfb8      	it	lt
 8001510:	4618      	movlt	r0, r3
 8001512:	e00f      	b.n	8001534 <_printf_i+0x224>
 8001514:	2500      	movs	r5, #0
 8001516:	68e3      	ldr	r3, [r4, #12]
 8001518:	9a03      	ldr	r2, [sp, #12]
 800151a:	1a9b      	subs	r3, r3, r2
 800151c:	429d      	cmp	r5, r3
 800151e:	daf3      	bge.n	8001508 <_printf_i+0x1f8>
 8001520:	4630      	mov	r0, r6
 8001522:	4639      	mov	r1, r7
 8001524:	f104 0219 	add.w	r2, r4, #25
 8001528:	2301      	movs	r3, #1
 800152a:	47c0      	blx	r8
 800152c:	3001      	adds	r0, #1
 800152e:	d0de      	beq.n	80014ee <_printf_i+0x1de>
 8001530:	3501      	adds	r5, #1
 8001532:	e7f0      	b.n	8001516 <_printf_i+0x206>
 8001534:	b004      	add	sp, #16
 8001536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800153a:	bf00      	nop
 800153c:	08001bc1 	.word	0x08001bc1
 8001540:	08001bd2 	.word	0x08001bd2

08001544 <_sbrk_r>:
 8001544:	b538      	push	{r3, r4, r5, lr}
 8001546:	4c06      	ldr	r4, [pc, #24]	; (8001560 <_sbrk_r+0x1c>)
 8001548:	2300      	movs	r3, #0
 800154a:	4605      	mov	r5, r0
 800154c:	4608      	mov	r0, r1
 800154e:	6023      	str	r3, [r4, #0]
 8001550:	f7ff f888 	bl	8000664 <_sbrk>
 8001554:	1c43      	adds	r3, r0, #1
 8001556:	d102      	bne.n	800155e <_sbrk_r+0x1a>
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	b103      	cbz	r3, 800155e <_sbrk_r+0x1a>
 800155c:	602b      	str	r3, [r5, #0]
 800155e:	bd38      	pop	{r3, r4, r5, pc}
 8001560:	20000074 	.word	0x20000074

08001564 <__sread>:
 8001564:	b510      	push	{r4, lr}
 8001566:	460c      	mov	r4, r1
 8001568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800156c:	f000 fa82 	bl	8001a74 <_read_r>
 8001570:	2800      	cmp	r0, #0
 8001572:	bfab      	itete	ge
 8001574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001576:	89a3      	ldrhlt	r3, [r4, #12]
 8001578:	181b      	addge	r3, r3, r0
 800157a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800157e:	bfac      	ite	ge
 8001580:	6563      	strge	r3, [r4, #84]	; 0x54
 8001582:	81a3      	strhlt	r3, [r4, #12]
 8001584:	bd10      	pop	{r4, pc}

08001586 <__swrite>:
 8001586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800158a:	461d      	mov	r5, r3
 800158c:	898b      	ldrh	r3, [r1, #12]
 800158e:	05db      	lsls	r3, r3, #23
 8001590:	4607      	mov	r7, r0
 8001592:	460c      	mov	r4, r1
 8001594:	4616      	mov	r6, r2
 8001596:	d505      	bpl.n	80015a4 <__swrite+0x1e>
 8001598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800159c:	2200      	movs	r2, #0
 800159e:	2302      	movs	r3, #2
 80015a0:	f000 f9b4 	bl	800190c <_lseek_r>
 80015a4:	89a3      	ldrh	r3, [r4, #12]
 80015a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015ae:	81a3      	strh	r3, [r4, #12]
 80015b0:	4638      	mov	r0, r7
 80015b2:	4632      	mov	r2, r6
 80015b4:	462b      	mov	r3, r5
 80015b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80015ba:	f000 b86b 	b.w	8001694 <_write_r>

080015be <__sseek>:
 80015be:	b510      	push	{r4, lr}
 80015c0:	460c      	mov	r4, r1
 80015c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015c6:	f000 f9a1 	bl	800190c <_lseek_r>
 80015ca:	1c43      	adds	r3, r0, #1
 80015cc:	89a3      	ldrh	r3, [r4, #12]
 80015ce:	bf15      	itete	ne
 80015d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80015d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80015d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80015da:	81a3      	strheq	r3, [r4, #12]
 80015dc:	bf18      	it	ne
 80015de:	81a3      	strhne	r3, [r4, #12]
 80015e0:	bd10      	pop	{r4, pc}

080015e2 <__sclose>:
 80015e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015e6:	f000 b8d3 	b.w	8001790 <_close_r>
	...

080015ec <__swbuf_r>:
 80015ec:	b570      	push	{r4, r5, r6, lr}
 80015ee:	460d      	mov	r5, r1
 80015f0:	4614      	mov	r4, r2
 80015f2:	4606      	mov	r6, r0
 80015f4:	b118      	cbz	r0, 80015fe <__swbuf_r+0x12>
 80015f6:	6983      	ldr	r3, [r0, #24]
 80015f8:	b90b      	cbnz	r3, 80015fe <__swbuf_r+0x12>
 80015fa:	f7ff fc05 	bl	8000e08 <__sinit>
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <__swbuf_r+0x9c>)
 8001600:	429c      	cmp	r4, r3
 8001602:	d101      	bne.n	8001608 <__swbuf_r+0x1c>
 8001604:	6874      	ldr	r4, [r6, #4]
 8001606:	e008      	b.n	800161a <__swbuf_r+0x2e>
 8001608:	4b20      	ldr	r3, [pc, #128]	; (800168c <__swbuf_r+0xa0>)
 800160a:	429c      	cmp	r4, r3
 800160c:	d101      	bne.n	8001612 <__swbuf_r+0x26>
 800160e:	68b4      	ldr	r4, [r6, #8]
 8001610:	e003      	b.n	800161a <__swbuf_r+0x2e>
 8001612:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <__swbuf_r+0xa4>)
 8001614:	429c      	cmp	r4, r3
 8001616:	bf08      	it	eq
 8001618:	68f4      	ldreq	r4, [r6, #12]
 800161a:	69a3      	ldr	r3, [r4, #24]
 800161c:	60a3      	str	r3, [r4, #8]
 800161e:	89a3      	ldrh	r3, [r4, #12]
 8001620:	071a      	lsls	r2, r3, #28
 8001622:	d509      	bpl.n	8001638 <__swbuf_r+0x4c>
 8001624:	6923      	ldr	r3, [r4, #16]
 8001626:	b13b      	cbz	r3, 8001638 <__swbuf_r+0x4c>
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	6920      	ldr	r0, [r4, #16]
 800162c:	1a18      	subs	r0, r3, r0
 800162e:	6963      	ldr	r3, [r4, #20]
 8001630:	4298      	cmp	r0, r3
 8001632:	b2ed      	uxtb	r5, r5
 8001634:	db0f      	blt.n	8001656 <__swbuf_r+0x6a>
 8001636:	e008      	b.n	800164a <__swbuf_r+0x5e>
 8001638:	4630      	mov	r0, r6
 800163a:	4621      	mov	r1, r4
 800163c:	f000 f83c 	bl	80016b8 <__swsetup_r>
 8001640:	2800      	cmp	r0, #0
 8001642:	d0f1      	beq.n	8001628 <__swbuf_r+0x3c>
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	bd70      	pop	{r4, r5, r6, pc}
 800164a:	4630      	mov	r0, r6
 800164c:	4621      	mov	r1, r4
 800164e:	f000 f933 	bl	80018b8 <_fflush_r>
 8001652:	2800      	cmp	r0, #0
 8001654:	d1f6      	bne.n	8001644 <__swbuf_r+0x58>
 8001656:	68a3      	ldr	r3, [r4, #8]
 8001658:	3b01      	subs	r3, #1
 800165a:	60a3      	str	r3, [r4, #8]
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	6022      	str	r2, [r4, #0]
 8001662:	701d      	strb	r5, [r3, #0]
 8001664:	6963      	ldr	r3, [r4, #20]
 8001666:	3001      	adds	r0, #1
 8001668:	4298      	cmp	r0, r3
 800166a:	d004      	beq.n	8001676 <__swbuf_r+0x8a>
 800166c:	89a3      	ldrh	r3, [r4, #12]
 800166e:	07db      	lsls	r3, r3, #31
 8001670:	d507      	bpl.n	8001682 <__swbuf_r+0x96>
 8001672:	2d0a      	cmp	r5, #10
 8001674:	d105      	bne.n	8001682 <__swbuf_r+0x96>
 8001676:	4630      	mov	r0, r6
 8001678:	4621      	mov	r1, r4
 800167a:	f000 f91d 	bl	80018b8 <_fflush_r>
 800167e:	2800      	cmp	r0, #0
 8001680:	d1e0      	bne.n	8001644 <__swbuf_r+0x58>
 8001682:	4628      	mov	r0, r5
 8001684:	bd70      	pop	{r4, r5, r6, pc}
 8001686:	bf00      	nop
 8001688:	08001b50 	.word	0x08001b50
 800168c:	08001b70 	.word	0x08001b70
 8001690:	08001b90 	.word	0x08001b90

08001694 <_write_r>:
 8001694:	b538      	push	{r3, r4, r5, lr}
 8001696:	4c07      	ldr	r4, [pc, #28]	; (80016b4 <_write_r+0x20>)
 8001698:	4605      	mov	r5, r0
 800169a:	2000      	movs	r0, #0
 800169c:	6020      	str	r0, [r4, #0]
 800169e:	4608      	mov	r0, r1
 80016a0:	4611      	mov	r1, r2
 80016a2:	461a      	mov	r2, r3
 80016a4:	f000 fa42 	bl	8001b2c <_write>
 80016a8:	1c43      	adds	r3, r0, #1
 80016aa:	d102      	bne.n	80016b2 <_write_r+0x1e>
 80016ac:	6823      	ldr	r3, [r4, #0]
 80016ae:	b103      	cbz	r3, 80016b2 <_write_r+0x1e>
 80016b0:	602b      	str	r3, [r5, #0]
 80016b2:	bd38      	pop	{r3, r4, r5, pc}
 80016b4:	20000074 	.word	0x20000074

080016b8 <__swsetup_r>:
 80016b8:	4b31      	ldr	r3, [pc, #196]	; (8001780 <__swsetup_r+0xc8>)
 80016ba:	b570      	push	{r4, r5, r6, lr}
 80016bc:	681d      	ldr	r5, [r3, #0]
 80016be:	4606      	mov	r6, r0
 80016c0:	460c      	mov	r4, r1
 80016c2:	b125      	cbz	r5, 80016ce <__swsetup_r+0x16>
 80016c4:	69ab      	ldr	r3, [r5, #24]
 80016c6:	b913      	cbnz	r3, 80016ce <__swsetup_r+0x16>
 80016c8:	4628      	mov	r0, r5
 80016ca:	f7ff fb9d 	bl	8000e08 <__sinit>
 80016ce:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <__swsetup_r+0xcc>)
 80016d0:	429c      	cmp	r4, r3
 80016d2:	d101      	bne.n	80016d8 <__swsetup_r+0x20>
 80016d4:	686c      	ldr	r4, [r5, #4]
 80016d6:	e008      	b.n	80016ea <__swsetup_r+0x32>
 80016d8:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <__swsetup_r+0xd0>)
 80016da:	429c      	cmp	r4, r3
 80016dc:	d101      	bne.n	80016e2 <__swsetup_r+0x2a>
 80016de:	68ac      	ldr	r4, [r5, #8]
 80016e0:	e003      	b.n	80016ea <__swsetup_r+0x32>
 80016e2:	4b2a      	ldr	r3, [pc, #168]	; (800178c <__swsetup_r+0xd4>)
 80016e4:	429c      	cmp	r4, r3
 80016e6:	bf08      	it	eq
 80016e8:	68ec      	ldreq	r4, [r5, #12]
 80016ea:	89a3      	ldrh	r3, [r4, #12]
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	0711      	lsls	r1, r2, #28
 80016f0:	d41d      	bmi.n	800172e <__swsetup_r+0x76>
 80016f2:	06d5      	lsls	r5, r2, #27
 80016f4:	d402      	bmi.n	80016fc <__swsetup_r+0x44>
 80016f6:	2209      	movs	r2, #9
 80016f8:	6032      	str	r2, [r6, #0]
 80016fa:	e038      	b.n	800176e <__swsetup_r+0xb6>
 80016fc:	0750      	lsls	r0, r2, #29
 80016fe:	d512      	bpl.n	8001726 <__swsetup_r+0x6e>
 8001700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001702:	b141      	cbz	r1, 8001716 <__swsetup_r+0x5e>
 8001704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001708:	4299      	cmp	r1, r3
 800170a:	d002      	beq.n	8001712 <__swsetup_r+0x5a>
 800170c:	4630      	mov	r0, r6
 800170e:	f000 f96d 	bl	80019ec <_free_r>
 8001712:	2300      	movs	r3, #0
 8001714:	6363      	str	r3, [r4, #52]	; 0x34
 8001716:	89a3      	ldrh	r3, [r4, #12]
 8001718:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800171c:	81a3      	strh	r3, [r4, #12]
 800171e:	2300      	movs	r3, #0
 8001720:	6063      	str	r3, [r4, #4]
 8001722:	6923      	ldr	r3, [r4, #16]
 8001724:	6023      	str	r3, [r4, #0]
 8001726:	89a3      	ldrh	r3, [r4, #12]
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	81a3      	strh	r3, [r4, #12]
 800172e:	6923      	ldr	r3, [r4, #16]
 8001730:	b94b      	cbnz	r3, 8001746 <__swsetup_r+0x8e>
 8001732:	89a3      	ldrh	r3, [r4, #12]
 8001734:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800173c:	d003      	beq.n	8001746 <__swsetup_r+0x8e>
 800173e:	4630      	mov	r0, r6
 8001740:	4621      	mov	r1, r4
 8001742:	f000 f8f5 	bl	8001930 <__smakebuf_r>
 8001746:	89a3      	ldrh	r3, [r4, #12]
 8001748:	f013 0201 	ands.w	r2, r3, #1
 800174c:	d005      	beq.n	800175a <__swsetup_r+0xa2>
 800174e:	2200      	movs	r2, #0
 8001750:	60a2      	str	r2, [r4, #8]
 8001752:	6962      	ldr	r2, [r4, #20]
 8001754:	4252      	negs	r2, r2
 8001756:	61a2      	str	r2, [r4, #24]
 8001758:	e003      	b.n	8001762 <__swsetup_r+0xaa>
 800175a:	0799      	lsls	r1, r3, #30
 800175c:	bf58      	it	pl
 800175e:	6962      	ldrpl	r2, [r4, #20]
 8001760:	60a2      	str	r2, [r4, #8]
 8001762:	6922      	ldr	r2, [r4, #16]
 8001764:	b94a      	cbnz	r2, 800177a <__swsetup_r+0xc2>
 8001766:	f003 0080 	and.w	r0, r3, #128	; 0x80
 800176a:	b280      	uxth	r0, r0
 800176c:	b130      	cbz	r0, 800177c <__swsetup_r+0xc4>
 800176e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001772:	81a3      	strh	r3, [r4, #12]
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	bd70      	pop	{r4, r5, r6, pc}
 800177a:	2000      	movs	r0, #0
 800177c:	bd70      	pop	{r4, r5, r6, pc}
 800177e:	bf00      	nop
 8001780:	20000060 	.word	0x20000060
 8001784:	08001b50 	.word	0x08001b50
 8001788:	08001b70 	.word	0x08001b70
 800178c:	08001b90 	.word	0x08001b90

08001790 <_close_r>:
 8001790:	b538      	push	{r3, r4, r5, lr}
 8001792:	4c06      	ldr	r4, [pc, #24]	; (80017ac <_close_r+0x1c>)
 8001794:	2300      	movs	r3, #0
 8001796:	4605      	mov	r5, r0
 8001798:	4608      	mov	r0, r1
 800179a:	6023      	str	r3, [r4, #0]
 800179c:	f000 f99e 	bl	8001adc <_close>
 80017a0:	1c43      	adds	r3, r0, #1
 80017a2:	d102      	bne.n	80017aa <_close_r+0x1a>
 80017a4:	6823      	ldr	r3, [r4, #0]
 80017a6:	b103      	cbz	r3, 80017aa <_close_r+0x1a>
 80017a8:	602b      	str	r3, [r5, #0]
 80017aa:	bd38      	pop	{r3, r4, r5, pc}
 80017ac:	20000074 	.word	0x20000074

080017b0 <__sflush_r>:
 80017b0:	898a      	ldrh	r2, [r1, #12]
 80017b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017b6:	4605      	mov	r5, r0
 80017b8:	0710      	lsls	r0, r2, #28
 80017ba:	460c      	mov	r4, r1
 80017bc:	d457      	bmi.n	800186e <__sflush_r+0xbe>
 80017be:	684b      	ldr	r3, [r1, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	dc02      	bgt.n	80017ca <__sflush_r+0x1a>
 80017c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	dd18      	ble.n	80017fc <__sflush_r+0x4c>
 80017ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017cc:	b1b6      	cbz	r6, 80017fc <__sflush_r+0x4c>
 80017ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017d2:	2300      	movs	r3, #0
 80017d4:	b292      	uxth	r2, r2
 80017d6:	682f      	ldr	r7, [r5, #0]
 80017d8:	602b      	str	r3, [r5, #0]
 80017da:	b10a      	cbz	r2, 80017e0 <__sflush_r+0x30>
 80017dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80017de:	e010      	b.n	8001802 <__sflush_r+0x52>
 80017e0:	6a21      	ldr	r1, [r4, #32]
 80017e2:	4628      	mov	r0, r5
 80017e4:	2301      	movs	r3, #1
 80017e6:	47b0      	blx	r6
 80017e8:	1c41      	adds	r1, r0, #1
 80017ea:	4602      	mov	r2, r0
 80017ec:	d109      	bne.n	8001802 <__sflush_r+0x52>
 80017ee:	682b      	ldr	r3, [r5, #0]
 80017f0:	b13b      	cbz	r3, 8001802 <__sflush_r+0x52>
 80017f2:	2b1d      	cmp	r3, #29
 80017f4:	d001      	beq.n	80017fa <__sflush_r+0x4a>
 80017f6:	2b16      	cmp	r3, #22
 80017f8:	d147      	bne.n	800188a <__sflush_r+0xda>
 80017fa:	602f      	str	r7, [r5, #0]
 80017fc:	2000      	movs	r0, #0
 80017fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001802:	89a3      	ldrh	r3, [r4, #12]
 8001804:	075b      	lsls	r3, r3, #29
 8001806:	d505      	bpl.n	8001814 <__sflush_r+0x64>
 8001808:	6863      	ldr	r3, [r4, #4]
 800180a:	1ad2      	subs	r2, r2, r3
 800180c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800180e:	b10b      	cbz	r3, 8001814 <__sflush_r+0x64>
 8001810:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001812:	1ad2      	subs	r2, r2, r3
 8001814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001816:	6a21      	ldr	r1, [r4, #32]
 8001818:	2300      	movs	r3, #0
 800181a:	4628      	mov	r0, r5
 800181c:	47b0      	blx	r6
 800181e:	1c46      	adds	r6, r0, #1
 8001820:	89a3      	ldrh	r3, [r4, #12]
 8001822:	d105      	bne.n	8001830 <__sflush_r+0x80>
 8001824:	682a      	ldr	r2, [r5, #0]
 8001826:	b11a      	cbz	r2, 8001830 <__sflush_r+0x80>
 8001828:	2a1d      	cmp	r2, #29
 800182a:	d001      	beq.n	8001830 <__sflush_r+0x80>
 800182c:	2a16      	cmp	r2, #22
 800182e:	d119      	bne.n	8001864 <__sflush_r+0xb4>
 8001830:	2200      	movs	r2, #0
 8001832:	6062      	str	r2, [r4, #4]
 8001834:	04d9      	lsls	r1, r3, #19
 8001836:	6922      	ldr	r2, [r4, #16]
 8001838:	6022      	str	r2, [r4, #0]
 800183a:	d504      	bpl.n	8001846 <__sflush_r+0x96>
 800183c:	1c42      	adds	r2, r0, #1
 800183e:	d101      	bne.n	8001844 <__sflush_r+0x94>
 8001840:	682b      	ldr	r3, [r5, #0]
 8001842:	b903      	cbnz	r3, 8001846 <__sflush_r+0x96>
 8001844:	6560      	str	r0, [r4, #84]	; 0x54
 8001846:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001848:	602f      	str	r7, [r5, #0]
 800184a:	2900      	cmp	r1, #0
 800184c:	d0d6      	beq.n	80017fc <__sflush_r+0x4c>
 800184e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001852:	4299      	cmp	r1, r3
 8001854:	d002      	beq.n	800185c <__sflush_r+0xac>
 8001856:	4628      	mov	r0, r5
 8001858:	f000 f8c8 	bl	80019ec <_free_r>
 800185c:	2000      	movs	r0, #0
 800185e:	6360      	str	r0, [r4, #52]	; 0x34
 8001860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001868:	81a3      	strh	r3, [r4, #12]
 800186a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800186e:	690f      	ldr	r7, [r1, #16]
 8001870:	2f00      	cmp	r7, #0
 8001872:	d0c3      	beq.n	80017fc <__sflush_r+0x4c>
 8001874:	0793      	lsls	r3, r2, #30
 8001876:	680e      	ldr	r6, [r1, #0]
 8001878:	bf08      	it	eq
 800187a:	694b      	ldreq	r3, [r1, #20]
 800187c:	600f      	str	r7, [r1, #0]
 800187e:	bf18      	it	ne
 8001880:	2300      	movne	r3, #0
 8001882:	ebc7 0806 	rsb	r8, r7, r6
 8001886:	608b      	str	r3, [r1, #8]
 8001888:	e012      	b.n	80018b0 <__sflush_r+0x100>
 800188a:	89a3      	ldrh	r3, [r4, #12]
 800188c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001890:	81a3      	strh	r3, [r4, #12]
 8001892:	f04f 30ff 	mov.w	r0, #4294967295
 8001896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800189a:	4628      	mov	r0, r5
 800189c:	6a21      	ldr	r1, [r4, #32]
 800189e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80018a0:	463a      	mov	r2, r7
 80018a2:	4643      	mov	r3, r8
 80018a4:	47b0      	blx	r6
 80018a6:	2800      	cmp	r0, #0
 80018a8:	ddef      	ble.n	800188a <__sflush_r+0xda>
 80018aa:	4407      	add	r7, r0
 80018ac:	ebc0 0808 	rsb	r8, r0, r8
 80018b0:	f1b8 0f00 	cmp.w	r8, #0
 80018b4:	dcf1      	bgt.n	800189a <__sflush_r+0xea>
 80018b6:	e7a1      	b.n	80017fc <__sflush_r+0x4c>

080018b8 <_fflush_r>:
 80018b8:	b538      	push	{r3, r4, r5, lr}
 80018ba:	690b      	ldr	r3, [r1, #16]
 80018bc:	4605      	mov	r5, r0
 80018be:	460c      	mov	r4, r1
 80018c0:	b1db      	cbz	r3, 80018fa <_fflush_r+0x42>
 80018c2:	b118      	cbz	r0, 80018cc <_fflush_r+0x14>
 80018c4:	6983      	ldr	r3, [r0, #24]
 80018c6:	b90b      	cbnz	r3, 80018cc <_fflush_r+0x14>
 80018c8:	f7ff fa9e 	bl	8000e08 <__sinit>
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <_fflush_r+0x48>)
 80018ce:	429c      	cmp	r4, r3
 80018d0:	d101      	bne.n	80018d6 <_fflush_r+0x1e>
 80018d2:	686c      	ldr	r4, [r5, #4]
 80018d4:	e008      	b.n	80018e8 <_fflush_r+0x30>
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <_fflush_r+0x4c>)
 80018d8:	429c      	cmp	r4, r3
 80018da:	d101      	bne.n	80018e0 <_fflush_r+0x28>
 80018dc:	68ac      	ldr	r4, [r5, #8]
 80018de:	e003      	b.n	80018e8 <_fflush_r+0x30>
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <_fflush_r+0x50>)
 80018e2:	429c      	cmp	r4, r3
 80018e4:	bf08      	it	eq
 80018e6:	68ec      	ldreq	r4, [r5, #12]
 80018e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018ec:	b12b      	cbz	r3, 80018fa <_fflush_r+0x42>
 80018ee:	4628      	mov	r0, r5
 80018f0:	4621      	mov	r1, r4
 80018f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018f6:	f7ff bf5b 	b.w	80017b0 <__sflush_r>
 80018fa:	2000      	movs	r0, #0
 80018fc:	bd38      	pop	{r3, r4, r5, pc}
 80018fe:	bf00      	nop
 8001900:	08001b50 	.word	0x08001b50
 8001904:	08001b70 	.word	0x08001b70
 8001908:	08001b90 	.word	0x08001b90

0800190c <_lseek_r>:
 800190c:	b538      	push	{r3, r4, r5, lr}
 800190e:	4c07      	ldr	r4, [pc, #28]	; (800192c <_lseek_r+0x20>)
 8001910:	4605      	mov	r5, r0
 8001912:	2000      	movs	r0, #0
 8001914:	6020      	str	r0, [r4, #0]
 8001916:	4608      	mov	r0, r1
 8001918:	4611      	mov	r1, r2
 800191a:	461a      	mov	r2, r3
 800191c:	f000 f8f6 	bl	8001b0c <_lseek>
 8001920:	1c43      	adds	r3, r0, #1
 8001922:	d102      	bne.n	800192a <_lseek_r+0x1e>
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	b103      	cbz	r3, 800192a <_lseek_r+0x1e>
 8001928:	602b      	str	r3, [r5, #0]
 800192a:	bd38      	pop	{r3, r4, r5, pc}
 800192c:	20000074 	.word	0x20000074

08001930 <__smakebuf_r>:
 8001930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001932:	898b      	ldrh	r3, [r1, #12]
 8001934:	079d      	lsls	r5, r3, #30
 8001936:	b091      	sub	sp, #68	; 0x44
 8001938:	4606      	mov	r6, r0
 800193a:	460c      	mov	r4, r1
 800193c:	d426      	bmi.n	800198c <__smakebuf_r+0x5c>
 800193e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001942:	2900      	cmp	r1, #0
 8001944:	da09      	bge.n	800195a <__smakebuf_r+0x2a>
 8001946:	89a3      	ldrh	r3, [r4, #12]
 8001948:	f013 0f80 	tst.w	r3, #128	; 0x80
 800194c:	f04f 0500 	mov.w	r5, #0
 8001950:	bf14      	ite	ne
 8001952:	2740      	movne	r7, #64	; 0x40
 8001954:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8001958:	e00d      	b.n	8001976 <__smakebuf_r+0x46>
 800195a:	aa01      	add	r2, sp, #4
 800195c:	f000 f89c 	bl	8001a98 <_fstat_r>
 8001960:	2800      	cmp	r0, #0
 8001962:	dbf0      	blt.n	8001946 <__smakebuf_r+0x16>
 8001964:	9d02      	ldr	r5, [sp, #8]
 8001966:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800196a:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 800196e:	424d      	negs	r5, r1
 8001970:	414d      	adcs	r5, r1
 8001972:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8001976:	4630      	mov	r0, r6
 8001978:	4639      	mov	r1, r7
 800197a:	f7ff facd 	bl	8000f18 <_malloc_r>
 800197e:	b960      	cbnz	r0, 800199a <__smakebuf_r+0x6a>
 8001980:	89a3      	ldrh	r3, [r4, #12]
 8001982:	059a      	lsls	r2, r3, #22
 8001984:	d41d      	bmi.n	80019c2 <__smakebuf_r+0x92>
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	81a3      	strh	r3, [r4, #12]
 800198c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001990:	6023      	str	r3, [r4, #0]
 8001992:	6123      	str	r3, [r4, #16]
 8001994:	2301      	movs	r3, #1
 8001996:	6163      	str	r3, [r4, #20]
 8001998:	e013      	b.n	80019c2 <__smakebuf_r+0x92>
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <__smakebuf_r+0x98>)
 800199c:	62b3      	str	r3, [r6, #40]	; 0x28
 800199e:	89a3      	ldrh	r3, [r4, #12]
 80019a0:	6020      	str	r0, [r4, #0]
 80019a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a6:	81a3      	strh	r3, [r4, #12]
 80019a8:	6120      	str	r0, [r4, #16]
 80019aa:	6167      	str	r7, [r4, #20]
 80019ac:	b14d      	cbz	r5, 80019c2 <__smakebuf_r+0x92>
 80019ae:	4630      	mov	r0, r6
 80019b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019b4:	f000 f882 	bl	8001abc <_isatty_r>
 80019b8:	b118      	cbz	r0, 80019c2 <__smakebuf_r+0x92>
 80019ba:	89a3      	ldrh	r3, [r4, #12]
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	81a3      	strh	r3, [r4, #12]
 80019c2:	b011      	add	sp, #68	; 0x44
 80019c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08000d89 	.word	0x08000d89

080019cc <memchr>:
 80019cc:	b510      	push	{r4, lr}
 80019ce:	b2c9      	uxtb	r1, r1
 80019d0:	4402      	add	r2, r0
 80019d2:	4290      	cmp	r0, r2
 80019d4:	4603      	mov	r3, r0
 80019d6:	d006      	beq.n	80019e6 <memchr+0x1a>
 80019d8:	781c      	ldrb	r4, [r3, #0]
 80019da:	428c      	cmp	r4, r1
 80019dc:	f100 0001 	add.w	r0, r0, #1
 80019e0:	d1f7      	bne.n	80019d2 <memchr+0x6>
 80019e2:	4618      	mov	r0, r3
 80019e4:	bd10      	pop	{r4, pc}
 80019e6:	2000      	movs	r0, #0
 80019e8:	bd10      	pop	{r4, pc}
	...

080019ec <_free_r>:
 80019ec:	b530      	push	{r4, r5, lr}
 80019ee:	2900      	cmp	r1, #0
 80019f0:	d03d      	beq.n	8001a6e <_free_r+0x82>
 80019f2:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80019f6:	1f0b      	subs	r3, r1, #4
 80019f8:	491d      	ldr	r1, [pc, #116]	; (8001a70 <_free_r+0x84>)
 80019fa:	2a00      	cmp	r2, #0
 80019fc:	bfb8      	it	lt
 80019fe:	189b      	addlt	r3, r3, r2
 8001a00:	680a      	ldr	r2, [r1, #0]
 8001a02:	460c      	mov	r4, r1
 8001a04:	b912      	cbnz	r2, 8001a0c <_free_r+0x20>
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	600b      	str	r3, [r1, #0]
 8001a0a:	bd30      	pop	{r4, r5, pc}
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d20d      	bcs.n	8001a2c <_free_r+0x40>
 8001a10:	6819      	ldr	r1, [r3, #0]
 8001a12:	1858      	adds	r0, r3, r1
 8001a14:	4290      	cmp	r0, r2
 8001a16:	bf01      	itttt	eq
 8001a18:	585a      	ldreq	r2, [r3, r1]
 8001a1a:	1852      	addeq	r2, r2, r1
 8001a1c:	601a      	streq	r2, [r3, #0]
 8001a1e:	6842      	ldreq	r2, [r0, #4]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	6023      	str	r3, [r4, #0]
 8001a24:	bd30      	pop	{r4, r5, pc}
 8001a26:	4299      	cmp	r1, r3
 8001a28:	d803      	bhi.n	8001a32 <_free_r+0x46>
 8001a2a:	460a      	mov	r2, r1
 8001a2c:	6851      	ldr	r1, [r2, #4]
 8001a2e:	2900      	cmp	r1, #0
 8001a30:	d1f9      	bne.n	8001a26 <_free_r+0x3a>
 8001a32:	6814      	ldr	r4, [r2, #0]
 8001a34:	1915      	adds	r5, r2, r4
 8001a36:	429d      	cmp	r5, r3
 8001a38:	d10a      	bne.n	8001a50 <_free_r+0x64>
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4423      	add	r3, r4
 8001a3e:	18d0      	adds	r0, r2, r3
 8001a40:	4288      	cmp	r0, r1
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	d113      	bne.n	8001a6e <_free_r+0x82>
 8001a46:	6808      	ldr	r0, [r1, #0]
 8001a48:	4403      	add	r3, r0
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	684b      	ldr	r3, [r1, #4]
 8001a4e:	e00d      	b.n	8001a6c <_free_r+0x80>
 8001a50:	d902      	bls.n	8001a58 <_free_r+0x6c>
 8001a52:	230c      	movs	r3, #12
 8001a54:	6003      	str	r3, [r0, #0]
 8001a56:	bd30      	pop	{r4, r5, pc}
 8001a58:	681c      	ldr	r4, [r3, #0]
 8001a5a:	1918      	adds	r0, r3, r4
 8001a5c:	4288      	cmp	r0, r1
 8001a5e:	bf04      	itt	eq
 8001a60:	6808      	ldreq	r0, [r1, #0]
 8001a62:	6849      	ldreq	r1, [r1, #4]
 8001a64:	6059      	str	r1, [r3, #4]
 8001a66:	bf04      	itt	eq
 8001a68:	1900      	addeq	r0, r0, r4
 8001a6a:	6018      	streq	r0, [r3, #0]
 8001a6c:	6053      	str	r3, [r2, #4]
 8001a6e:	bd30      	pop	{r4, r5, pc}
 8001a70:	20000070 	.word	0x20000070

08001a74 <_read_r>:
 8001a74:	b538      	push	{r3, r4, r5, lr}
 8001a76:	4c07      	ldr	r4, [pc, #28]	; (8001a94 <_read_r+0x20>)
 8001a78:	4605      	mov	r5, r0
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	6020      	str	r0, [r4, #0]
 8001a7e:	4608      	mov	r0, r1
 8001a80:	4611      	mov	r1, r2
 8001a82:	461a      	mov	r2, r3
 8001a84:	f000 f84a 	bl	8001b1c <_read>
 8001a88:	1c43      	adds	r3, r0, #1
 8001a8a:	d102      	bne.n	8001a92 <_read_r+0x1e>
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	b103      	cbz	r3, 8001a92 <_read_r+0x1e>
 8001a90:	602b      	str	r3, [r5, #0]
 8001a92:	bd38      	pop	{r3, r4, r5, pc}
 8001a94:	20000074 	.word	0x20000074

08001a98 <_fstat_r>:
 8001a98:	b538      	push	{r3, r4, r5, lr}
 8001a9a:	4c07      	ldr	r4, [pc, #28]	; (8001ab8 <_fstat_r+0x20>)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	4605      	mov	r5, r0
 8001aa0:	4608      	mov	r0, r1
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	6023      	str	r3, [r4, #0]
 8001aa6:	f000 f821 	bl	8001aec <_fstat>
 8001aaa:	1c43      	adds	r3, r0, #1
 8001aac:	d102      	bne.n	8001ab4 <_fstat_r+0x1c>
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	b103      	cbz	r3, 8001ab4 <_fstat_r+0x1c>
 8001ab2:	602b      	str	r3, [r5, #0]
 8001ab4:	bd38      	pop	{r3, r4, r5, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000074 	.word	0x20000074

08001abc <_isatty_r>:
 8001abc:	b538      	push	{r3, r4, r5, lr}
 8001abe:	4c06      	ldr	r4, [pc, #24]	; (8001ad8 <_isatty_r+0x1c>)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	4605      	mov	r5, r0
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	6023      	str	r3, [r4, #0]
 8001ac8:	f000 f818 	bl	8001afc <_isatty>
 8001acc:	1c43      	adds	r3, r0, #1
 8001ace:	d102      	bne.n	8001ad6 <_isatty_r+0x1a>
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	b103      	cbz	r3, 8001ad6 <_isatty_r+0x1a>
 8001ad4:	602b      	str	r3, [r5, #0]
 8001ad6:	bd38      	pop	{r3, r4, r5, pc}
 8001ad8:	20000074 	.word	0x20000074

08001adc <_close>:
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <_close+0xc>)
 8001ade:	2258      	movs	r2, #88	; 0x58
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae6:	4770      	bx	lr
 8001ae8:	20000074 	.word	0x20000074

08001aec <_fstat>:
 8001aec:	4b02      	ldr	r3, [pc, #8]	; (8001af8 <_fstat+0xc>)
 8001aee:	2258      	movs	r2, #88	; 0x58
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	f04f 30ff 	mov.w	r0, #4294967295
 8001af6:	4770      	bx	lr
 8001af8:	20000074 	.word	0x20000074

08001afc <_isatty>:
 8001afc:	4b02      	ldr	r3, [pc, #8]	; (8001b08 <_isatty+0xc>)
 8001afe:	2258      	movs	r2, #88	; 0x58
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	2000      	movs	r0, #0
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000074 	.word	0x20000074

08001b0c <_lseek>:
 8001b0c:	4b02      	ldr	r3, [pc, #8]	; (8001b18 <_lseek+0xc>)
 8001b0e:	2258      	movs	r2, #88	; 0x58
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	f04f 30ff 	mov.w	r0, #4294967295
 8001b16:	4770      	bx	lr
 8001b18:	20000074 	.word	0x20000074

08001b1c <_read>:
 8001b1c:	4b02      	ldr	r3, [pc, #8]	; (8001b28 <_read+0xc>)
 8001b1e:	2258      	movs	r2, #88	; 0x58
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	f04f 30ff 	mov.w	r0, #4294967295
 8001b26:	4770      	bx	lr
 8001b28:	20000074 	.word	0x20000074

08001b2c <_write>:
 8001b2c:	4b02      	ldr	r3, [pc, #8]	; (8001b38 <_write+0xc>)
 8001b2e:	2258      	movs	r2, #88	; 0x58
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	f04f 30ff 	mov.w	r0, #4294967295
 8001b36:	4770      	bx	lr
 8001b38:	20000074 	.word	0x20000074
 8001b3c:	6c6c6568 	.word	0x6c6c6568
 8001b40:	6f77206f 	.word	0x6f77206f
 8001b44:	00646c72 	.word	0x00646c72
 8001b48:	00000043 	.word	0x00000043

08001b4c <_global_impure_ptr>:
 8001b4c:	20000000                                ... 

08001b50 <__sf_fake_stdin>:
	...

08001b70 <__sf_fake_stdout>:
	...

08001b90 <__sf_fake_stderr>:
	...
 8001bb0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
 8001bc0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
 8001bd0:	31300046 35343332 39383736 64636261     F.0123456789abcd
 8001be0:	00006665                                ef..
